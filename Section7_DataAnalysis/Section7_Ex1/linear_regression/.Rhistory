?rvest::html_children
test <- read_html("https://www.yelp.ca/biz/reds-midtown-tavern-toronto-2?start=20") %>% html_nodes(".biz-rating-large .rating-qualifier") %>% html_attrs()
test[1]
test
test <- read_html("https://www.yelp.ca/biz/reds-midtown-tavern-toronto-2?start=20") %>% html_nodes(".biz-rating-large .rating-qualifier")# %>% html_attrs()
test[1]
test[8]
as.character(test[8])
test <- read_html(BaseURL_OpenTable) %>% html_nodes(".review-meta-separator+ .color-light")
test[1]
test <- read_html(BaseURL_OpenTable) %>% html_nodes(".review-meta-separator+ .color-light") %>% html_text()
test[1]
tail(test)
LandingURL_TripAd <- "https://www.tripadvisor.ca/Restaurant_Review-g155019-d5058760-Reviews-Reds_Midtown_Tavern-Toronto_Ontario.html"
ReviewTitleLink <- read_html(LandingURL_TripAd) %>% html_nodes(".quote a") %>% html_attr("href")
BaseURL_TripAd <- paste("https://www.tripadvisor.ca",ReviewTitleLink[1],sep="")
test <- read_html(BaseURL_TripAd) %>% html_nodes(".relativeDate")
test[1]
test <- read_html(BaseURL_TripAd) %>% html_nodes(".relativeDate") %>% html_attr("content")
test[1]
rm(list=ls())
library(rvest)
library(dplyr)
library(tidyr)
BaseURL_Yelp <- "https://www.yelp.ca/biz/reds-midtown-tavern-toronto-2"
ReviewCount <- 0 #Counter for the number of reviews. On the Yelp there are 20 per page
ReviewsYelp <- character(0)
RatingsYelp <- character(0)
DatesYelp <- character(0)
PrevRevYelp <- character(0)
flag <- 1
while(flag==1){
#Yelp URL for the given review page
page_url <- paste(BaseURL_Yelp,"?start=",as.character(ReviewCount),sep="")
#Scrape the reviews and ratings from the current URL
ReviewsNew <- read_html(page_url) %>% html_nodes(".review-content p") %>% html_text
RatingsNew <- read_html(page_url) %>% html_nodes(".rating-large") %>% html_attr("title")
DatesNew <- read_html(page_url) %>% html_nodes(".biz-rating-large .rating-qualifier") %>% html_text()
PrevRevNew <- read_html(page_url) %>% html_nodes(".biz-rating-large .rating-qualifier")
print(paste("Scraping Yelp page",ceiling(ReviewCount/20)))
#Append new reviews/ratings to existing vectors
ReviewsYelp <- c(ReviewsYelp,ReviewsNew)
RatingsYelp <- c(RatingsYelp,RatingsNew)
DatesYelp <- c(DatesYelp, DatesNew)
PrevRevYelp <- c(PrevRevYelp,PrevRevNew)
#Increment the review counter to move to the next page in the following iteration
ReviewCount=ReviewCount +length(ReviewsNew)
#Loop ending condition
flag <- if(length(ReviewsNew)==0){0} else {1}
}
head(DatesYelp)
tail(DatesYelp)
head(PrevRevYelp)
head(RatingsYelp)
PrevRevYelp[1:20]
PrevRevYelp[1:40]
rm(list=ls())
library(rvest)
library(dplyr)
library(tidyr)
BaseURL_Yelp <- "https://www.yelp.ca/biz/reds-midtown-tavern-toronto-2"
ReviewCount <- 0 #Counter for the number of reviews. On the Yelp there are 20 per page
ReviewsYelp <- character(0)
RatingsYelp <- character(0)
DatesYelp <- character(0)
PrevRevYelp <- character(0)
flag <- 1
while(flag==1){
#Yelp URL for the given review page
page_url <- paste(BaseURL_Yelp,"?start=",as.character(ReviewCount),sep="")
#Scrape the reviews and ratings from the current URL
ReviewsNew <- read_html(page_url) %>% html_nodes(".review-content p") %>% html_text
RatingsNew <- read_html(page_url) %>% html_nodes(".rating-large") %>% html_attr("title")
DatesNew <- read_html(page_url) %>% html_nodes(".biz-rating-large .rating-qualifier") %>% html_text()
PrevRevNew <- read_html(page_url) %>% html_nodes(".biz-rating-large .rating-qualifier") %>% as.character()
print(paste("Scraping Yelp page",ceiling(ReviewCount/20)))
#Append new reviews/ratings to existing vectors
ReviewsYelp <- c(ReviewsYelp,ReviewsNew)
RatingsYelp <- c(RatingsYelp,RatingsNew)
DatesYelp <- c(DatesYelp, DatesNew)
PrevRevYelp <- c(PrevRevYelp,PrevRevNew)
#Increment the review counter to move to the next page in the following iteration
ReviewCount=ReviewCount +length(ReviewsNew)
#Loop ending condition
flag <- if(length(ReviewsNew)==0){0} else {1}
}
PrevRevYelp[30:40]
PrevRevYelp[1:40]
BaseURL_OpenTable <- "https://www.opentable.com/reds-midtown-tavern?covers=2&dateTime=2017-02-22+19%3A00%23reviews&page="
ReviewCount <- 1
ReviewsOpenTable <- character(0)
RatingsOpenTable <- character(0)
DatesOpenTable <- character(0)
flag <- 1
while(flag==1) {
#Get URL for current page
page_url <- paste(BaseURL_OpenTable,as.character(ReviewCount),sep="")
#Obtain ratings/reviews from page
ReviewsNew <- read_html(page_url) %>% html_nodes("#reviews-results .review-content") %>% html_text
RatingsNew <- read_html(page_url) %>% html_nodes("#reviews-results .filled") %>% html_attr("title")
DatesOpenTableNew <- read_html(page_url) %>% html_nodes(".review-meta-separator+ .color-light") %>% html_text()
#Append ratings/reviews
ReviewsOpenTable <- c(ReviewsOpenTable,ReviewsNew)
RatingsOpenTable <- c(RatingsOpenTable,RatingsNew)
DatesOpenTable <- c(DatesOpenTable,DatesOpenTableNew)
print(paste("Scraping OpenTable page",ReviewCount))
#Increment counter
ReviewCount <- ReviewCount+1
#This condition checks whether we have reached the end of the reviews
flag <- if(length(ReviewsNew)==0){0} else {1}
}
DatesOpenTable[1:20]
Sys.time()
sys.date()
sys.Date()
?sys
Sys.Date()
DatesOpenTable[1:40]
LandingURL_TripAd <- "https://www.tripadvisor.ca/Restaurant_Review-g155019-d5058760-Reviews-Reds_Midtown_Tavern-Toronto_Ontario.html"
ReviewTitleLink <- read_html(LandingURL_TripAd) %>% html_nodes(".quote a") %>% html_attr("href")
BaseURL_TripAd <- paste("https://www.tripadvisor.ca",ReviewTitleLink[1],sep="")
ReviewCount <- 1
ReviewsTripAd <- character(0)
RatingsTripAd <- character(0)
DatesTripAd <- character(0)
flag <- 1
while(flag==1){
print(paste("Scraping Trip Advisor page",ReviewCount))
#For the first page, the URL we want to use is jsut the base URL. For subsequent
#iterations, we want to grab the hyperlink to the new page from the page links
#in the previous page. E.g. page 1 carries a link to page 2 in its HTML.
if(ReviewCount == 1){
page_url <- BaseURL_TripAd
} else {
#Grab the page numbers for the links
pagenum <- read_html(page_url) %>% html_nodes(".pageNum") %>% html_attr("data-page-number") %>% as.numeric()
#Grab the hyperlinks for the following pages
hyperlink <- read_html(page_url) %>% html_nodes(".pageNum") %>% html_attr("href") %>% as.character()
print(paste("Scraping Trip Advisor page",ReviewCount))
page_url <- paste("https://www.tripadvisor.ca",hyperlink[pagenum==ReviewCount],sep="")
}
#Read in reviews and ratings from current page
ReviewsNew <- read_html(page_url) %>% html_nodes("#REVIEWS p") %>% html_text()
RatingsNew <- read_html(page_url) %>% html_nodes("#REVIEWS .rating_s_fill") %>% html_attr("alt")
DatesNew <- read_html(page_url) %>% html_nodes(".relativeDate") %>% html_attr("content")
#End loop condition
flag <- if(length(ReviewsNew)==0){0} else {1}
#Append new reviews/ratings
ReviewsTripAd <- c(ReviewsTripAd, ReviewsNew)
RatingsTripAd <- c(RatingsTripAd, RatingsNew)
DatesTripAd <- c(DatesTripAd, DatesNew)
#Increment page count
ReviewCount <- ReviewCount+1
}
DatesTripAd
test <- read_html("https://www.tripadvisor.ca/ShowUserReviews-g155019-d5058760-r456753642-Reds_Midtown_Tavern-Toronto_Ontario.html#REVIEWS") %>% html_nodes(".relativeDate")
test
LandingURL_TripAd <- "https://www.tripadvisor.ca/Restaurant_Review-g155019-d5058760-Reviews-Reds_Midtown_Tavern-Toronto_Ontario.html"
ReviewTitleLink <- read_html(LandingURL_TripAd) %>% html_nodes(".quote a") %>% html_attr("href")
BaseURL_TripAd <- paste("https://www.tripadvisor.ca",ReviewTitleLink[1],sep="")
ReviewCount <- 1
ReviewsTripAd <- character(0)
RatingsTripAd <- character(0)
DatesTripAd <- character(0)
flag <- 1
while(flag==1){
print(paste("Scraping Trip Advisor page",ReviewCount))
#For the first page, the URL we want to use is jsut the base URL. For subsequent
#iterations, we want to grab the hyperlink to the new page from the page links
#in the previous page. E.g. page 1 carries a link to page 2 in its HTML.
if(ReviewCount == 1){
page_url <- BaseURL_TripAd
} else {
#Grab the page numbers for the links
pagenum <- read_html(page_url) %>% html_nodes(".pageNum") %>% html_attr("data-page-number") %>% as.numeric()
#Grab the hyperlinks for the following pages
hyperlink <- read_html(page_url) %>% html_nodes(".pageNum") %>% html_attr("href") %>% as.character()
page_url <- paste("https://www.tripadvisor.ca",hyperlink[pagenum==ReviewCount],sep="")
}
#Read in reviews and ratings from current page
ReviewsNew <- read_html(page_url) %>% html_nodes("#REVIEWS p") %>% html_text()
RatingsNew <- read_html(page_url) %>% html_nodes("#REVIEWS .rating_s_fill") %>% html_attr("alt")
DatesNew <- read_html(page_url) %>% html_nodes(".relativeDate") %>% html_attr("title")
#End loop condition
flag <- if(length(ReviewsNew)==0){0} else {1}
#Append new reviews/ratings
ReviewsTripAd <- c(ReviewsTripAd, ReviewsNew)
RatingsTripAd <- c(RatingsTripAd, RatingsNew)
DatesTripAd <- c(DatesTripAd, DatesNew)
#Increment page count
ReviewCount <- ReviewCount+1
}
DatesTripAd
ReviewCount <- 1
ReviewsTripAd <- character(0)
RatingsTripAd <- character(0)
DatesTripAd <- character(0)
flag <- 1
while(flag==1){
print(paste("Scraping Trip Advisor page",ReviewCount))
#For the first page, the URL we want to use is jsut the base URL. For subsequent
#iterations, we want to grab the hyperlink to the new page from the page links
#in the previous page. E.g. page 1 carries a link to page 2 in its HTML.
if(ReviewCount == 1){
page_url <- BaseURL_TripAd
} else {
#Grab the page numbers for the links
pagenum <- read_html(page_url) %>% html_nodes(".pageNum") %>% html_attr("data-page-number") %>% as.numeric()
#Grab the hyperlinks for the following pages
hyperlink <- read_html(page_url) %>% html_nodes(".pageNum") %>% html_attr("href") %>% as.character()
page_url <- paste("https://www.tripadvisor.ca",hyperlink[pagenum==ReviewCount],sep="")
}
#Read in reviews and ratings from current page
ReviewsNew <- read_html(page_url) %>% html_nodes("#REVIEWS p") %>% html_text()
RatingsNew <- read_html(page_url) %>% html_nodes("#REVIEWS .rating_s_fill") %>% html_attr("alt")
DatesNew <- read_html(page_url) %>% html_nodes(".relativeDate") %>% html_attr("title")
print(DatesNew)
#End loop condition
flag <- if(length(ReviewsNew)==0){0} else {1}
#Append new reviews/ratings
ReviewsTripAd <- c(ReviewsTripAd, ReviewsNew)
RatingsTripAd <- c(RatingsTripAd, RatingsNew)
DatesTripAd <- c(DatesTripAd, DatesNew)
#Increment page count
ReviewCount <- ReviewCount+1
}
LandingURL_TripAd <- "https://www.tripadvisor.ca/Restaurant_Review-g155019-d5058760-Reviews-Reds_Midtown_Tavern-Toronto_Ontario.html"
ReviewTitleLink <- read_html(LandingURL_TripAd) %>% html_nodes(".quote a") %>% html_attr("href")
BaseURL_TripAd <- paste("https://www.tripadvisor.ca",ReviewTitleLink[1],sep="")
ReviewCount <- 1
ReviewsTripAd <- character(0)
RatingsTripAd <- character(0)
DatesTripAd1 <- character(0)
DatesTripAd2 <- character(0)
flag <- 1
while(flag==1){
print(paste("Scraping Trip Advisor page",ReviewCount))
#For the first page, the URL we want to use is jsut the base URL. For subsequent
#iterations, we want to grab the hyperlink to the new page from the page links
#in the previous page. E.g. page 1 carries a link to page 2 in its HTML.
if(ReviewCount == 1){
page_url <- BaseURL_TripAd
} else {
#Grab the page numbers for the links
pagenum <- read_html(page_url) %>% html_nodes(".pageNum") %>% html_attr("data-page-number") %>% as.numeric()
#Grab the hyperlinks for the following pages
hyperlink <- read_html(page_url) %>% html_nodes(".pageNum") %>% html_attr("href") %>% as.character()
page_url <- paste("https://www.tripadvisor.ca",hyperlink[pagenum==ReviewCount],sep="")
}
#Read in reviews and ratings from current page
ReviewsNew <- read_html(page_url) %>% html_nodes("#REVIEWS p") %>% html_text()
RatingsNew <- read_html(page_url) %>% html_nodes("#REVIEWS .rating_s_fill") %>% html_attr("alt")
DatesNew1 <- read_html(page_url) %>% html_nodes(".relativeDate") %>% html_attr("title")
DatesNew2 <- read_html(page_url) %>% html_nodes(".ratingeDate") %>% html_text()
#End loop condition
flag <- if(length(ReviewsNew)==0){0} else {1}
#Append new reviews/ratings
ReviewsTripAd <- c(ReviewsTripAd, ReviewsNew)
RatingsTripAd <- c(RatingsTripAd, RatingsNew)
DatesTripAd1 <- c(DatesTripAd1, DatesNew1)
DatesTripAd2 <- c(DatesTripAd2, DatesNew2)
#Increment page count
ReviewCount <- ReviewCount+1
}
DatesNew1
DatesNew1
DatesTripAd11
DatesTripAd1
DatesTripAd2
DatesTripAd2
BaseURL_TripAd <- paste("https://www.tripadvisor.ca",ReviewTitleLink[1],sep="")
ReviewCount <- 1
ReviewsTripAd <- character(0)
RatingsTripAd <- character(0)
DatesTripAd1 <- character(0)
DatesTripAd2 <- character(0)
flag <- 1
while(flag==1){
print(paste("Scraping Trip Advisor page",ReviewCount))
#For the first page, the URL we want to use is jsut the base URL. For subsequent
#iterations, we want to grab the hyperlink to the new page from the page links
#in the previous page. E.g. page 1 carries a link to page 2 in its HTML.
if(ReviewCount == 1){
page_url <- BaseURL_TripAd
} else {
#Grab the page numbers for the links
pagenum <- read_html(page_url) %>% html_nodes(".pageNum") %>% html_attr("data-page-number") %>% as.numeric()
#Grab the hyperlinks for the following pages
hyperlink <- read_html(page_url) %>% html_nodes(".pageNum") %>% html_attr("href") %>% as.character()
page_url <- paste("https://www.tripadvisor.ca",hyperlink[pagenum==ReviewCount],sep="")
}
#Read in reviews and ratings from current page
ReviewsNew <- read_html(page_url) %>% html_nodes("#REVIEWS p") %>% html_text()
RatingsNew <- read_html(page_url) %>% html_nodes("#REVIEWS .rating_s_fill") %>% html_attr("alt")
DatesNew1 <- read_html(page_url) %>% html_nodes(".relativeDate") %>% html_attr("title",default=NA_character_)
DatesNew2 <- read_html(page_url) %>% html_nodes(".ratingDate") %>% html_text()
#End loop condition
flag <- if(length(ReviewsNew)==0){0} else {1}
#Append new reviews/ratings
ReviewsTripAd <- c(ReviewsTripAd, ReviewsNew)
RatingsTripAd <- c(RatingsTripAd, RatingsNew)
DatesTripAd1 <- c(DatesTripAd1, DatesNew1)
DatesTripAd2 <- c(DatesTripAd2, DatesNew2)
#Increment page count
ReviewCount <- ReviewCount+1
}
DatesTripAd1
DatesTripAd2
RatingsTripAd <- character(0)
DatesTripAd1 <- character(0)
DatesTripAd2 <- character(0)
flag <- 1
while(flag==1){
print(paste("Scraping Trip Advisor page",ReviewCount))
#For the first page, the URL we want to use is jsut the base URL. For subsequent
#iterations, we want to grab the hyperlink to the new page from the page links
#in the previous page. E.g. page 1 carries a link to page 2 in its HTML.
if(ReviewCount == 1){
page_url <- BaseURL_TripAd
} else {
#Grab the page numbers for the links
pagenum <- read_html(page_url) %>% html_nodes(".pageNum") %>% html_attr("data-page-number") %>% as.numeric()
#Grab the hyperlinks for the following pages
hyperlink <- read_html(page_url) %>% html_nodes(".pageNum") %>% html_attr("href") %>% as.character()
page_url <- paste("https://www.tripadvisor.ca",hyperlink[pagenum==ReviewCount],sep="")
}
#Read in reviews and ratings from current page
ReviewsNew <- read_html(page_url) %>% html_nodes("#REVIEWS p") %>% html_text()
RatingsNew <- read_html(page_url) %>% html_nodes("#REVIEWS .rating_s_fill") %>% html_attr("alt")
DatesNew1 <- read_html(page_url) %>% html_node(".relativeDate") %>% html_attr("title",default=NA_character_)
DatesNew2 <- read_html(page_url) %>% html_nodes(".ratingDate") %>% html_text()
#End loop condition
flag <- if(length(ReviewsNew)==0){0} else {1}
#Append new reviews/ratings
ReviewsTripAd <- c(ReviewsTripAd, ReviewsNew)
RatingsTripAd <- c(RatingsTripAd, RatingsNew)
DatesTripAd1 <- c(DatesTripAd1, DatesNew1)
DatesTripAd2 <- c(DatesTripAd2, DatesNew2)
#Increment page count
ReviewCount <- ReviewCount+1
}
DatesTripAd1
while(flag==1){
print(paste("Scraping Trip Advisor page",ReviewCount))
#For the first page, the URL we want to use is jsut the base URL. For subsequent
#iterations, we want to grab the hyperlink to the new page from the page links
#in the previous page. E.g. page 1 carries a link to page 2 in its HTML.
if(ReviewCount == 1){
page_url <- BaseURL_TripAd
} else {
#Grab the page numbers for the links
pagenum <- read_html(page_url) %>% html_nodes(".pageNum") %>% html_attr("data-page-number") %>% as.numeric()
#Grab the hyperlinks for the following pages
hyperlink <- read_html(page_url) %>% html_nodes(".pageNum") %>% html_attr("href") %>% as.character()
page_url <- paste("https://www.tripadvisor.ca",hyperlink[pagenum==ReviewCount],sep="")
}
#Read in reviews and ratings from current page
ReviewsNew <- read_html(page_url) %>% html_nodes("#REVIEWS p") %>% html_text()
RatingsNew <- read_html(page_url) %>% html_nodes("#REVIEWS .rating_s_fill") %>% html_attr("alt")
DatesNew1 <- read_html(page_url) %>% html_nodes(".relativeDate") %>% html_attr("title",default=NA_character_)
DatesNew2 <- read_html(page_url) %>% html_nodes(".ratingDate") %>% html_text()
#End loop condition
flag <- if(length(ReviewsNew)==0){0} else {1}
#Append new reviews/ratings
ReviewsTripAd <- c(ReviewsTripAd, ReviewsNew)
RatingsTripAd <- c(RatingsTripAd, RatingsNew)
DatesTripAd1 <- c(DatesTripAd1, DatesNew1)
DatesTripAd2 <- c(DatesTripAd2, DatesNew2)
#Increment page count
ReviewCount <- ReviewCount+1
}
DatesTripAd1
quit("no")
setwd("/Users/Antoine/Documents/Work/DataScience/Springboard/FoundationsofDataScience/Section7_DataAnalysis/Section7_Ex1/linear_regression/")
getwd() # where am I?
list.files("dataSets") # files in the dataSets folder
states.data <- readRDS("dataSets/states.rds")
str(states.data)
attributes(states.data)
states.info <- data.frame(attributes(states.data)[c("names", "var.labels")])
tail(states.info, 8)
head(states.data)
tail(states.info, 8)
sts.ex.sat <- subset(states.data, select = c("expense", "csat"))
summary(sts.ex.sat)
subset(states.data, select = c("expense", "csat"))
cor(sts.ex.sat)
plot(sts.ex.sat)
sat.mod <- lm(csat ~ expense, # regression formula
data=states.data) # data set
summary(sat.mod) # show regression coefficients table
tail(states.info, 8)
summary(lm(csat ~ expense + percent, data = states.data))
class(sat.mod)
names(sat.mod)
methods(class = class(sat.mod))[1:9]
par(mar = c(4, 4, 2, 2), mfrow = c(1, 2)) #optional
plot(sat.mod, which = c(1, 2)) # "which" argument optional
View(states.data)
head(states.data)
attribute(states.data)
attributes(states.data)
attributes(states.data)$names
attributes(states.data)$var.labels
states.info <- data.frame(attributes(states.data)[c("names", "var.labels")])
tail(states.info, 8)
states.info
sts.ex.sat <- subset(states.data, select = c("expense", "csat"))
summary(sts.ex.sat)
cor(sts.ex.sat)
plot(sts.ex.sat)
plot(sts.ex.sat)
sat.mod <- lm(csat ~ expense, data=states.data)
summary(sat.mod) # show regression coefficients table
states.info
summary(lm(csat ~ expense + percent, data = states.data))
class(sat.mod)
names(sat.mod)
class(sat.mod)
methods(class=class(sat.mod))
?method()
?methods()
methods(class="character")
methods(class="numeric")
confint(sat.mod)
states.info
states.data$house
states.data$senate
sat.voting.mod <-  lm(csat ~ expense + house + senate,
data = na.omit(states.data))
sat.mod <- update(sat.mod, data=na.omit(states.data))
sat.mod <- update(sat.mod, data=na.omit(states.data))
anova(sat.mod, sat.voting.mod)
coef(summary(sat.voting.mod))
summary(sat.voting.mod)
str(states.data)
states.info
plot(energy ~ metro, data=states.data)
EnergyModel <- lm(energy~metro,data=states.data)
summary(EnergyModel)
plot(EnergyModel)
states.info
EnergyModel2 <- lm(energy~metro+population, data=states.data)
summary(EnergyModel2)
EnergyModel2 <- lm(energy~metro+pop, data=states.data)
summary(EnergyModel2)
EnergyModel2 <- lm(energy~metro+pop+density, data=states.data)
summary(EnergyModel2)
states.info
EnergyModel2 <- lm(energy~metro+pop+density+area+waste+miles+green, data=states.data)
summary(EnergyModel2)
EnergyModel3 <- lm(energy~metro+density+area+waste+miles+green, data=states.data)
summary(EnergyModel3)
EnergyModel4 <- lm(energy~metro+area+waste+miles+green, data=states.data)
summary(EnergyModel4)
EnergyModel5 <- lm(energy~metro+density+area+miles+green, data=states.data)
summary(EnergyModel5)
EnergyModel5 <- lm(energy~metro+area+miles+green, data=states.data)
summary(EnergyModel5)
EnergyModel6 <- lm(energy~area+miles+green, data=states.data)
summary(EnergyModel6)
EnergyModel7 <- lm(energy~area+green, data=states.data)
summary(EnergyModel7)
cor(states.data)
str(states.data)
cor(subset(states.data),select = c("pop","area","density","metro","waste","energy","miles","toxic","green","house","senate","csat","vsat","msat","percent","expense","income","high","college"))
cor(subset(states.data,select = c("pop","area","density","metro","waste","energy","miles","toxic","green","house","senate","csat","vsat","msat","percent","expense","income","high","college")))
EnergyModel <- lm(energy~metro,data=na.omit(states.data))
summary(EnergyModel)
plot(EnergyModel)
states.info
EnergyModel2 <- lm(energy~metro+pop+density+area+waste+miles+green, data=na.omit(states.data))
summary(EnergyModel2)
EnergyModel3 <- lm(energy~metro+density+area+waste+miles+green, data=na.omit(states.data))
summary(EnergyModel3)
EnergyModel4 <- lm(energy~metro+area+waste+miles+green, data=na.omit(states.data))
summary(EnergyModel4)
EnergyModel5 <- lm(energy~metro+area+miles+green, data=na.omit(states.data))
summary(EnergyModel5)
EnergyModel6 <- lm(energy~area+miles+green, data=na.omit(states.data))
summary(EnergyModel6)
EnergyModel7 <- lm(energy~area+green, data=na.omit(states.data))
summary(EnergyModel7)
cor(subset(states.data,select = c("pop","area","density","metro","waste","energy","miles","toxic","green","house","senate","csat","vsat","msat","percent","expense","income","high","college")))
EnergyModel7 <- lm(energy~area+green, data=na.omit(states.data))
summary(EnergyModel7)
subset(states.data,select = c("pop","area","density","metro","waste","energy","miles","toxic","green","house","senate","csat","vsat","msat","percent","expense","income","high","college"))
DataNum <- subset(states.data,select = c("pop","area","density","metro","waste","energy","miles","toxic","green","house","senate","csat","vsat","msat","percent","expense","income","high","college"))
class(DataNum) <- "numeric"
str(DataNum)
class(DataNum)
DataNum <- as.data.frame(subset(states.data,select = c("pop","area","density","metro","waste","energy","miles","toxic","green","house","senate","csat","vsat","msat","percent","expense","income","high","college")))
class(DataNum)
class(DataNum) <- "numeric"
DataNum <- as.data.frame(subset(states.data,select = c("pop","area","density","metro","waste","energy","miles","toxic","green","house","senate","csat","vsat","msat","percent","expense","income","high","college")))
class(DataNum) <- "numeric"
cor(DataNum)
DataNum
DataNum <- as.matrix(subset(states.data,select = c("pop","area","density","metro","waste","energy","miles","toxic","green","house","senate","csat","vsat","msat","percent","expense","income","high","college")))
cor(DataNum)
sat.expense.by.percent <- lm(csat ~ expense*income,
data=states.data)
coef(summary(sat.expense.by.percent)) # show regression coefficients table
str(states.data$region)
states.data$region <- factor(states.data$region)
str(states.data$region)
sat.region <- lm(csat ~ region,
data=states.data)
coef(summary(sat.region)) # show regression coefficients table
summary(sat.region)
anova(sat.region) # show ANOVA table
contrasts(states.data$region)

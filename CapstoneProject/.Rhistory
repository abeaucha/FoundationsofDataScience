Dates2 <- character(0)
flag <- 1
while(flag==1){
print(paste("Scraping Trip Advisor page",ReviewCount))
#For the first page, the URL we want to use is jsut the base URL. For subsequent
#iterations, we want to grab the hyperlink to the new page from the page links
#in the previous page. E.g. page 1 carries a link to page 2 in its HTML.
if(ReviewCount == 1){
page_url <- BaseURL
} else {
#Grab the page numbers for the links
pagenum <- read_html(page_url) %>% html_nodes(".pageNum") %>% html_attr("data-page-number") %>% as.numeric()
#Grab the hyperlinks for the following pages
hyperlink <- read_html(page_url) %>% html_nodes(".pageNum") %>% html_attr("href") %>% as.character()
page_url <- paste("https://www.tripadvisor.ca",hyperlink[pagenum==ReviewCount],sep="")
}
#Read in reviews and ratings from current page
ReviewsNew <- read_html(page_url) %>% html_nodes("#REVIEWS p") %>% html_text()
RatingsNew <- read_html(page_url) %>% html_nodes("#REVIEWS .rating_s_fill") %>% html_attr("alt")
DatesNew1 <- read_html(page_url) %>% html_nodes(".relativeDate") %>% html_attr("title",default=NA_character_)
DatesNew2 <- read_html(page_url) %>% html_nodes(".ratingDate") %>% html_text()
#End loop condition
flag <- if(length(ReviewsNew)==0){0} else {1}
#Append new reviews/ratings
Reviews <- c(Reviews, ReviewsNew)
Ratings <- c(Ratings, RatingsNew)
Dates1 <- c(Dates1, DatesNew1)
Dates2 <- c(Dates2, DatesNew2)
#Increment page count
ReviewCount <- ReviewCount+1
}
return(list("Reviews"=Reviews,"Ratings"=Ratings, "Dates1"=Dates1,"Dates2"=Dates2))
}
ZomatoScrape <- function(BaseURL) {
#Set parameters for data scraping.
ReviewCount <- 1
Reviews <- character(0)
Ratings <- character(0)
Dates <- character(0)
flag <- 1
Reviews <- read_html(BaseURL) %>% html_nodes(".rev-text-expand , .rev-text") %>% html_text()
Ratings <- read_html(BaseURL) %>% html_nodes(".rev-text-expand div , .rev-text div") %>% html_attr("aria-label")
Dates <- read_html(BaseURL) %>% html_nodes("time") %>% html_attr("datetime")
return(list("Reviews"=Reviews,"Ratings"=Ratings, "Dates"=Dates))
}
BaseURL_Yelp <- "https://www.yelp.ca/biz/reds-midtown-tavern-toronto-2"
BaseURL_OpenTable <- "https://www.opentable.com/reds-midtown-tavern?covers=2&dateTime=2017-02-22+19%3A00%23reviews&page="
LandingURL_TripAd <- "https://www.tripadvisor.ca/Restaurant_Review-g155019-d5058760-Reviews-Reds_Midtown_Tavern-Toronto_Ontario.html"
BaseURL_Zomato <- "https://www.zomato.com/toronto/reds-midtown-tavern-church-and-wellesley/reviews"
YelpData <- YelpScrape(BaseURL_Yelp)
OpenTableData <- OpenTableScrape(BaseURL_OpenTable)
TripAdData <- TripAdScrape(LandingURL_TripAd)
ZomatoData <- ZomatoScrape(BaseURL_Zomato)
save(YelpData,OpenTableData,TripAdData,ZomatoData, file="./Data/CapstoneRawData.RData")
rm(list=ls())
load(./Data/CapstoneRawData.RData)
load("./Data/CapstoneRawData.RData")
TripAdData$Dates1
TripAdData$Dates2
CapstoneDir = "/Users/Antoine/Documents/Work/DataScience/Springboard/FoundationsofDataScience/CapstoneProject"
setwd(CapstoneDir)
rm(list=ls())
library(rvest)
library(dplyr)
library(tidyr)
library(readr)
YelpScrape <- function(BaseURL) {
ReviewCount <- 0 #Counter for the number of reviews. On the Yelp there are 20 per page
#Empty character vectors for the reviews and ratings
Reviews <- character(0)
Ratings <- character(0)
Dates <- character(0)
PrevRev <- character(0)
flag <- 1
#Now let's iterate over the different Yelp review pages and scrape the data.
while(flag==1){
#Yelp URL for the given review page
page_url <- paste(BaseURL,"?start=",as.character(ReviewCount),sep="")
#Scrape the reviews and ratings from the current URL
ReviewsNew <- read_html(page_url) %>% html_nodes(".review-content p") %>% html_text
RatingsNew <- read_html(page_url) %>% html_nodes(".rating-large") %>% html_attr("title")
DatesNew <- read_html(page_url) %>% html_nodes(".biz-rating-large .rating-qualifier") %>% html_text()
PrevRevNew <- read_html(page_url) %>% html_nodes(".biz-rating-large .rating-qualifier") %>% as.character()
print(paste("Scraping Yelp page",ceiling(ReviewCount/20)))
#Append new reviews/ratings to existing vectors
Reviews <- c(Reviews,ReviewsNew)
Ratings <- c(Ratings,RatingsNew)
Dates <- c(Dates, DatesNew)
PrevRev <- c(PrevRev,PrevRevNew)
#Increment the review counter to move to the next page in the following iteration
ReviewCount=ReviewCount +length(ReviewsNew)
#Loop ending condition
flag <- if(length(ReviewsNew)==0){0} else {1}
}
return(list("Reviews"=Reviews, "Ratings"=Ratings, "Dates"=Dates, "PrevRev"=PrevRev))
}
OpenTableScrape <- function(BaseURL) {
# Parameters
ReviewCount <- 1
Reviews <- character(0)
Ratings <- character(0)
Dates <- character(0)
flag <- 1
while(flag==1) {
#Get URL for current page
page_url <- paste(BaseURL,as.character(ReviewCount),sep="")
#Obtain ratings/reviews from page
ReviewsNew <- read_html(page_url) %>% html_nodes("#reviews-results .review-content") %>% html_text
RatingsNew <- read_html(page_url) %>% html_nodes("#reviews-results .filled") %>% html_attr("title")
DatesNew <- read_html(page_url) %>% html_nodes(".review-meta-separator+ .color-light") %>% html_text()
#Append ratings/reviews
Reviews <- c(Reviews,ReviewsNew)
Ratings <- c(Ratings,RatingsNew)
Dates <- c(Dates,DatesNew)
print(paste("Scraping OpenTable page",ReviewCount))
#Increment counter
ReviewCount <- ReviewCount+1
#This condition checks whether we have reached the end of the reviews
flag <- if(length(ReviewsNew)==0){0} else {1}
}
return(list("Reviews"=Reviews, "Ratings"=Ratings, "Dates"=Dates))
}
TripAdScrape <- function(LandingURL) {
#This gets the links to the review page, which are embedded in the review titles
ReviewTitleLink <- read_html(LandingURL) %>% html_nodes(".quote a") %>% html_attr("href")
#The base URL to the first review page is
BaseURL <- paste("https://www.tripadvisor.ca",ReviewTitleLink[1],sep="")
#Set parameters for data scraping.
ReviewCount <- 1
Reviews <- character(0)
Ratings <- character(0)
Dates1 <- character(0)
Dates2 <- character(0)
flag <- 1
while(flag==1){
print(paste("Scraping Trip Advisor page",ReviewCount))
#For the first page, the URL we want to use is jsut the base URL. For subsequent
#iterations, we want to grab the hyperlink to the new page from the page links
#in the previous page. E.g. page 1 carries a link to page 2 in its HTML.
if(ReviewCount == 1){
page_url <- BaseURL
} else {
#Grab the page numbers for the links
pagenum <- read_html(page_url) %>% html_nodes(".pageNum") %>% html_attr("data-page-number") %>% as.numeric()
#Grab the hyperlinks for the following pages
hyperlink <- read_html(page_url) %>% html_nodes(".pageNum") %>% html_attr("href") %>% as.character()
page_url <- paste("https://www.tripadvisor.ca",hyperlink[pagenum==ReviewCount],sep="")
}
#Read in reviews and ratings from current page
ReviewsNew <- read_html(page_url) %>% html_nodes("#REVIEWS p") %>% html_text()
RatingsNew <- read_html(page_url) %>% html_nodes("#REVIEWS .rating_s_fill") %>% html_attr("alt")
DatesNew1 <- read_html(page_url) %>% html_nodes(".relativeDate") %>% html_attr("title",default=NA_character_)
DatesNew2 <- read_html(page_url) %>% html_nodes(".ratingDate") %>% html_text()
#End loop condition
flag <- if(length(ReviewsNew)==0){0} else {1}
#Append new reviews/ratings
Reviews <- c(Reviews, ReviewsNew)
Ratings <- c(Ratings, RatingsNew)
Dates1 <- c(Dates1, DatesNew1)
Dates2 <- c(Dates2, DatesNew2)
#Increment page count
ReviewCount <- ReviewCount+1
}
return(list("Reviews"=Reviews,"Ratings"=Ratings, "Dates1"=Dates1,"Dates2"=Dates2))
}
ZomatoScrape <- function(BaseURL) {
#Set parameters for data scraping.
ReviewCount <- 1
Reviews <- character(0)
Ratings <- character(0)
Dates <- character(0)
flag <- 1
Reviews <- read_html(BaseURL) %>% html_nodes(".rev-text-expand , .rev-text") %>% html_text()
Ratings <- read_html(BaseURL) %>% html_nodes(".rev-text-expand div , .rev-text div") %>% html_attr("aria-label")
Dates <- read_html(BaseURL) %>% html_nodes("time") %>% html_attr("datetime")
return(list("Reviews"=Reviews,"Ratings"=Ratings, "Dates"=Dates))
}
BaseURL_Yelp <- "https://www.yelp.ca/biz/reds-midtown-tavern-toronto-2"
BaseURL_OpenTable <- "https://www.opentable.com/reds-midtown-tavern?covers=2&dateTime=2017-02-22+19%3A00%23reviews&page="
LandingURL_TripAd <- "https://www.tripadvisor.ca/Restaurant_Review-g155019-d5058760-Reviews-Reds_Midtown_Tavern-Toronto_Ontario.html"
BaseURL_Zomato <- "https://www.zomato.com/toronto/reds-midtown-tavern-church-and-wellesley/reviews"
YelpData <- YelpScrape(BaseURL_Yelp)
OpenTableData <- OpenTableScrape(BaseURL_OpenTable)
TripAdData <- TripAdScrape(LandingURL_TripAd)
ZomatoData <- ZomatoScrape(BaseURL_Zomato)
DatesLogic <- grepl("[0-9]+.*ago",OpenTableData$Dates)
DatesTemp <- OpenTableData$Dates[DatesLogic]
DineDate <- character(length(DatesTemp))
for (i in 1:length(DatesTemp)){
#Extract the number of days ago that the review was posted.
dineDay <- regmatches(DatesTemp,regexpr("[0-9]+",DatesTemp)) %>% as.numeric()
#Grab today's date
todayDate <- Sys.Date()
#Subtract the number of days from today's date
DineDate[i] <- todayDate - dineDay
}
OpenTableData$Dates[DatesLogic] <- DineDate
save(YelpData,OpenTableData,TripAdData,ZomatoData, file="./Data/CapstoneRawData.RData")
load("./Data/CapstoneRawData.RData")
NoPrevRev <- grepl("has-previous-review",YelpData$PrevRev) == FALSE
YelpData$Ratings <- YelpData$Ratings[NoPrevRev]
YelpData$Dates <- YelpData$Dates[NoPrevRev]
str(YelpData)
str(OpenTableData)
str(TripAdData)
str(ZomatoData)
YelpVec <- rep("Yelp",length(YelpData$Reviews))
YelpDF <- data_frame(Reviews=YelpData$Reviews,Ratings=YelpData$Ratings,Dates=YelpData$Dates, Website=YelpVec)
OpenTableVec <- rep("OpenTable", length(OpenTableData$Reviews))
OpenTableDF <- data_frame(Reviews=OpenTableData$Reviews, Ratings=OpenTableData$Ratings, Dates=OpenTableData$Dates,Website=OpenTableVec)
RatingsNA <- is.na(ZomatoData$Ratings)==FALSE
RatingsNA
!RatingsNA
RatingsNA <- is.na(ZomatoData$Ratings)==FALSE
ZomatoData$Ratings <- ZomatoData$Ratings[RatingsNA]
ZomatoData$Ratings
grepl("read more",ZomatoData$Reviews)
!grepl("read more",ZomatoData$Reviews)
grepl("read more",ZomatoData$Reviews) == FALSE
rm(list=ls())
suppressMessages(library(rvest))
suppressMessages(library(dplyr))
library(tidyr)
suppressMessages(library(readr))
load("./Data/CapstoneRawData.RData")
str(YelpData)
str(OpenTableData)
str(TripAdData)
str(ZomatoData)
NoPrevRev <- grepl("has-previous-review",YelpData$PrevRev) == FALSE
YelpData$Ratings <- YelpData$Ratings[NoPrevRev]
YelpData$Dates <- YelpData$Dates[NoPrevRev]
YelpVec <- rep("Yelp",length(YelpData$Reviews))
YelpDF <- data_frame(Reviews=YelpData$Reviews,Ratings=YelpData$Ratings,Dates=YelpData$Dates, Website=YelpVec)
# Create vector to describe category of OpenTable
OpenTableVec <- rep("OpenTable", length(OpenTableData$Reviews))
#Create OpenTable data frame
OpenTableDF <- data_frame(Reviews=OpenTableData$Reviews, Ratings=OpenTableData$Ratings, Dates=OpenTableData$Dates,Website=OpenTableVec)
is.na(ZomatoData$Ratings)==FALSE
!is.na(ZomatoData$Ratings)
ZomatoData$Ratings <- ZomatoData$Ratings[!is.na(ZomatoData$Ratings)]
ZomatoData$Ratings
FullRev <- !grepl("read more",ZomatoData$Reviews)
ZomatoData$Ratings <- ZomatoData$Ratings[FullRev]
ZomatoData$Reviews <- ZomatoData$Reviews[FullRev]
ZomatoVec <- rep("Zomato", length(ZomatoData$Reviews))
ZomatoDF <- data_frame(Reviews=ZomatoData$Reviews,Ratings=ZomatoData$Ratings, Dates=ZomatoData$Dates, Website=ZomatoVec)
TripAdData$Dates2[grepl("ago",TripAdData$Dates2)] <- TripAdData$Dates1
TripAdVec <- rep("TripAdvisor",length(TripAdData$Reviews))
TripAdDF <- data_frame(Reviews=TripAdData$Reviews,Ratings=TripAdData$Ratings,Dates=TripAdData$Dates2,Website=TripAdVec)
TripAdData$Dates2
TripAdData$Dates2[grepl("ago|yesterday",TripAdData$Dates2)] <- TripAdData$Dates1
rm(list=ls())
load("./Data/CapstoneRawData.RData")
str(YelpData)
str(OpenTableData)
str(TripAdData)
str(ZomatoData)
#Identify which reviews are not previous reviews and discard those that do
NoPrevRev <- grepl("has-previous-review",YelpData$PrevRev) == FALSE
YelpData$Ratings <- YelpData$Ratings[NoPrevRev]
YelpData$Dates <- YelpData$Dates[NoPrevRev]
#Create vector to describe the review category as Yelp
YelpVec <- rep("Yelp",length(YelpData$Reviews))
#Combine Yelp data vectors in DF
YelpDF <- data_frame(Reviews=YelpData$Reviews,Ratings=YelpData$Ratings,Dates=YelpData$Dates, Website=YelpVec)
# Create vector to describe category of OpenTable
OpenTableVec <- rep("OpenTable", length(OpenTableData$Reviews))
#Create OpenTable data frame
OpenTableDF <- data_frame(Reviews=OpenTableData$Reviews, Ratings=OpenTableData$Ratings, Dates=OpenTableData$Dates,Website=OpenTableVec)
#Remove the double values from the ratings, which take on NAs
ZomatoData$Ratings <- ZomatoData$Ratings[!is.na(ZomatoData$Ratings)]
#Remove duplicate reviews. These truncated duplicates have the regex
# "read more" within them.
FullRev <- !grepl("read more",ZomatoData$Reviews)
ZomatoData$Ratings <- ZomatoData$Ratings[FullRev]
ZomatoData$Reviews <- ZomatoData$Reviews[FullRev]
#Create vector describe website category
ZomatoVec <- rep("Zomato", length(ZomatoData$Reviews))
#Merge to data frame
ZomatoDF <- data_frame(Reviews=ZomatoData$Reviews,Ratings=ZomatoData$Ratings, Dates=ZomatoData$Dates, Website=ZomatoVec)
#Replace dates of the form "Reviewed ## days ago" with the proper dates
TripAdData$Dates2[grepl("ago|yesterday",TripAdData$Dates2)] <- TripAdData$Dates1
#Create vector describing website
TripAdVec <- rep("TripAdvisor",length(TripAdData$Reviews))
TripAdDF <- data_frame(Reviews=TripAdData$Reviews,Ratings=TripAdData$Ratings,Dates=TripAdData$Dates2,Website=TripAdVec)
TripAdData$Dates2
d1 <-full_join(YelpDF,OpenTableDF)
d2 <- full_join(d1,ZomatoDF)
RawDF <- full_join(d2,TripAdDF) %>% group_by(Website)
RawDF
CapstoneDF <- full_join(d2,TripAdDF) %>% group_by(Website)
str(CapstoneDF)
summary(CapstoneDF)
head(CapstoneDF)
dim(CapstoneDF)
CapstoneDir = "/Users/Antoine/Documents/Work/DataScience/Springboard/FoundationsofDataScience/CapstoneProject"
setwd(CapstoneDir)
rm(list=ls())
library(rvest)
library(dplyr)
library(tidyr)
library(readr)
RawDF <- load("./Data/CapstoneRawData.RData")
str(RawDF)
class(RawDF)
RawDF[1]
RawDF[1][1]
load("./Data/CapstoneRawData.RData")
str(RawDF)
rm(list=ls())
library(rvest)
library(dplyr)
library(tidyr)
library(readr)
load("./Data/CapstoneRawData.RData")
NoPrevRev <- grepl("has-previous-review",YelpData$PrevRev) == FALSE
YelpData$Ratings <- YelpData$Ratings[NoPrevRev]
YelpData$Dates <- YelpData$Dates[NoPrevRev]
YelpVec <- rep("Yelp",length(YelpData$Reviews))
YelpDF <- data_frame(Reviews=YelpData$Reviews,Ratings=YelpData$Ratings,Dates=YelpData$Dates, Website=YelpVec)
OpenTableVec <- rep("OpenTable", length(OpenTableData$Reviews))
OpenTableDF <- data_frame(Reviews=OpenTableData$Reviews, Ratings=OpenTableData$Ratings, Dates=OpenTableData$Dates,Website=OpenTableVec)
RatingsNA <- is.na(ZomatoData$Ratings)==FALSE
ZomatoData$Ratings <- ZomatoData$Ratings[RatingsNA]
FullRev <- grepl("read more",ZomatoData$Reviews) == FALSE
ZomatoData$Ratings <- ZomatoData$Ratings[FullRev]
ZomatoData$Reviews <- ZomatoData$Reviews[FullRev]
ZomatoVec <- rep("Zomato", length(ZomatoData$Reviews))
ZomatoDF <- data_frame(Reviews=ZomatoData$Reviews,Ratings=ZomatoData$Ratings, Dates=ZomatoData$Dates, Website=ZomatoVec)
TripAdData$Dates2[grepl("ago",TripAdData$Dates2)] <- TripAdData$Dates1
TripAdVec <- rep("TripAdvisor",length(TripAdData$Reviews))
TripAdDF <- data_frame(Reviews=TripAdData$Reviews,Ratings=TripAdData$Ratings,Dates=TripAdData$Dates2,Website=TripAdVec)
d1 <-full_join(YelpDF,OpenTableDF)
d2 <- full_join(d1,ZomatoDF)
RawDF <- full_join(d2,TripAdDF) %>% group_by(Website)
str(RawDF)
summary(RawDF)
rm(list=ls())
rm(list=ls())
rm(list=ls())
rm(list=ls())
rm(list=ls())
rm(list=ls())
rm(list=ls())
#Load required libraries
suppressMessages(library(rvest))
suppressMessages(library(dplyr))
library(tidyr)
suppressMessages(library(readr))
load("./Data/CapstoneRawData.RData")
str(YelpData)
str(OpenTableData)
str(TripAdData)
str(ZomatoData)
#Identify which reviews are not previous reviews and discard those that do
NoPrevRev <- grepl("has-previous-review",YelpData$PrevRev) == FALSE
YelpData$Ratings <- YelpData$Ratings[NoPrevRev]
YelpData$Dates <- YelpData$Dates[NoPrevRev]
#Create vector to describe the review category as Yelp
YelpVec <- rep("Yelp",length(YelpData$Reviews))
#Combine Yelp data vectors in DF
YelpDF <- data_frame(Reviews=YelpData$Reviews,Ratings=YelpData$Ratings,Dates=YelpData$Dates, Website=YelpVec)
# Create vector to describe category of OpenTable
OpenTableVec <- rep("OpenTable", length(OpenTableData$Reviews))
#Create OpenTable data frame
OpenTableDF <- data_frame(Reviews=OpenTableData$Reviews, Ratings=OpenTableData$Ratings, Dates=OpenTableData$Dates,Website=OpenTableVec)
#Remove the double values from the ratings, which take on NAs
ZomatoData$Ratings <- ZomatoData$Ratings[!is.na(ZomatoData$Ratings)]
#Remove duplicate reviews. These truncated duplicates have the regex
# "read more" within them.
FullRev <- !grepl("read more",ZomatoData$Reviews)
ZomatoData$Ratings <- ZomatoData$Ratings[FullRev]
ZomatoData$Reviews <- ZomatoData$Reviews[FullRev]
#Create vector describe website category
ZomatoVec <- rep("Zomato", length(ZomatoData$Reviews))
#Merge to data frame
ZomatoDF <- data_frame(Reviews=ZomatoData$Reviews,Ratings=ZomatoData$Ratings, Dates=ZomatoData$Dates, Website=ZomatoVec)
#Replace dates of the form "Reviewed ## days ago" with the proper dates
TripAdData$Dates2[grepl("ago|yesterday|today",TripAdData$Dates2)] <- TripAdData$Dates1
#Create vector describing website
TripAdVec <- rep("TripAdvisor",length(TripAdData$Reviews))
TripAdDF <- data_frame(Reviews=TripAdData$Reviews,Ratings=TripAdData$Ratings,Dates=TripAdData$Dates2,Website=TripAdVec)
#Merge all data frames
d1 <-full_join(YelpDF,OpenTableDF)
d2 <- full_join(d1,ZomatoDF)
CapstoneDF <- full_join(d2,TripAdDF) %>% group_by(Website)
str(CapstoneDF)
summary(CapstoneDF)
head(CapstoneDF$Dates,n=20)
head(subset(CapstoneDF$Dates, CapstoneDF$Website=="Yelp"))
head(subset(CapstoneDF$Dates, CapstoneDF$Website=="Yelp"),n=10)
RawDF$Dates <- gsub("\n *","",RawDF$Dates)
CapstoneDF$Dates <- gsub("\n *","",RawDF$Dates)
CapstoneDF$Dates <- gsub("\n *","",CapstoneDFDF$Dates)
CapstoneDF$Dates <- gsub("\n *","",CapstoneDF$Dates)
head(subset(CapstoneDF$Dates, CapstoneDF$Website=="Yelp"),n=10)
head(subset(CapstoneDF$Dates, CapstoneDF$Website=="OpenTable"),n=10)
CleanDates <- grepl("^[0-9].*[0-9]$",CapstoneDF$Dates)
UncleanInd <- which(CleanDates==FALSE)
UncleanDates <- CapstoneDF$Dates[UncleanInd]
head(UncleanDates, n=50)
head(UncleanDates, n=20)
#We see that the first thing that we need to remove is the dates that are
#followed by "Updated review".
RawDF$Dates <- gsub("Updated review.*$","", RawDF$Dates)
#We see that the first thing that we need to remove is the dates that are
#followed by "Updated review".
CapstoneDF$Dates <- gsub("Updated review.*$","", CapstoneDF$Dates)
#The second obvious thing is that a lot of dates begin with "Dined on".
#These correspond to OpenTable reviews
CapstoneDF$Dates <- gsub("Dined on ","",CapstoneDF$Dates)
head(subset(CapstoneDF$Dates, CapstoneDF$Website=="OpenTable"),n=10)
head(subset(CapstoneDF$Dates, CapstoneDF$Website=="OpenTable"),n=20)
head(subset(CapstoneDF$Dates, CapstoneDF$Website=="TripAdvisor"),n=10)
head(subset(CapstoneDF$Dates, CapstoneDF$Website=="TripAdvisor"),n=20)
CapstoneDF$Dates <- gsub("Reviewed ","",CapstoneDF$Dates)
head(subset(CapstoneDF$Dates, CapstoneDF$Website=="Zomato"),n=20)
View(CapstoneDF)
grepl("^[0-9].*[0-9]$",CapstoneDF$Dates)
!grepl("^[0-9].*[0-9]$",CapstoneDF$Dates)
UncleanDates <- CapstoneDF$Dates[!grepl("^[0-9].*[0-9]$",CapstoneDF$Dates)]
head(UncleanDates, n=20)
head(UncleanDates, n=50)
CleanDates <- grepl("^[0-9].*[0-9]$",CapstoneDF$Dates)
UncleanInd <- which(CleanDates==FALSE)
UncleanDates <- CapstoneDF$Dates[UncleanInd]
head(UncleanDates, n=20)
rm(list=ls())
suppressMessages(library(rvest))
suppressMessages(library(dplyr))
library(tidyr)
suppressMessages(library(readr))
load("./Data/CapstoneRawData.RData")
str(YelpData)
str(OpenTableData)
str(TripAdData)
str(ZomatoData)
CapstoneDir = "/Users/Antoine/Documents/Work/DataScience/Springboard/FoundationsofDataScience/CapstoneProject"
setwd(CapstoneDir)
rm(list=ls())
suppressMessages(library(rvest))
YelpURL <- "https://www.yelp.ca/biz/reds-midtown-tavern-toronto-2"
YelpURL_data <-read_html(YelpURL)
print(YelpURL_data)
YelpReviews <- html_nodes(YelpURL_data, ".review-content p")
head(YelpReviews)
YelpReviews_char1 <- as.character(YelpReviews)
head(YelpReviews_char1, n=2)
YelpReviews_char2 <- html_text(YelpReviews)
head(YelpReviews_char2, n=2)
head(html_attrs(YelpReviews), n=3)
class(html_attrs(YelpReviews))
head(html_attr(YelpReviews, "lang"))
class(html_attr(YelpReviews, "lang"))
YelpRatings <- html_nodes(YelpURL_data, ".rating-large")
as.character(YelpRatings)[1]
head(html_attrs(YelpRatings), n=3)
YelpRatings_clean <- html_attr(YelpRatings, "title")
head(YelpRatings_clean)
rm(list=ls())
#Load required libraries
suppressMessages(library(rvest))
suppressMessages(library(dplyr))
library(tidyr)
suppressMessages(library(readr))
load("./Data/CapstoneRawData.RData")
str(YelpData)
str(OpenTableData)
str(TripAdData)
str(ZomatoData)
#Identify which reviews are not previous reviews and discard those that do
NoPrevRev <- grepl("has-previous-review",YelpData$PrevRev) == FALSE
YelpData$Ratings <- YelpData$Ratings[NoPrevRev]
YelpData$Dates <- YelpData$Dates[NoPrevRev]
#Create vector to describe the review category as Yelp
YelpVec <- rep("Yelp",length(YelpData$Reviews))
#Combine Yelp data vectors in DF
YelpDF <- data_frame(Reviews=YelpData$Reviews,Ratings=YelpData$Ratings,Dates=YelpData$Dates, Website=YelpVec)
# Create vector to describe category of OpenTable
OpenTableVec <- rep("OpenTable", length(OpenTableData$Reviews))
#Create OpenTable data frame
OpenTableDF <- data_frame(Reviews=OpenTableData$Reviews, Ratings=OpenTableData$Ratings, Dates=OpenTableData$Dates,Website=OpenTableVec)
#Remove the double values from the ratings, which take on NAs
ZomatoData$Ratings <- ZomatoData$Ratings[!is.na(ZomatoData$Ratings)]
#Remove duplicate reviews. These truncated duplicates have the regex
# "read more" within them.
FullRev <- !grepl("read more",ZomatoData$Reviews)
ZomatoData$Ratings <- ZomatoData$Ratings[FullRev]
ZomatoData$Reviews <- ZomatoData$Reviews[FullRev]
#Create vector describe website category
ZomatoVec <- rep("Zomato", length(ZomatoData$Reviews))
#Merge to data frame
ZomatoDF <- data_frame(Reviews=ZomatoData$Reviews,Ratings=ZomatoData$Ratings, Dates=ZomatoData$Dates, Website=ZomatoVec)
#Replace dates of the form "Reviewed ## days ago" with the proper dates
TripAdData$Dates2[grepl("ago|yesterday|today",TripAdData$Dates2)] <- TripAdData$Dates1
#Create vector describing website
TripAdVec <- rep("TripAdvisor",length(TripAdData$Reviews))
TripAdDF <- data_frame(Reviews=TripAdData$Reviews,Ratings=TripAdData$Ratings,Dates=TripAdData$Dates2,Website=TripAdVec)
#Merge all data frames
d1 <-suppressMessages(full_join(YelpDF,OpenTableDF))
d2 <- suppressMessages(full_join(d1,ZomatoDF))
CapstoneDF <- suppressMessages(full_join(d2,TripAdDF)) %>% group_by(Website)
str(CapstoneDF)
summary(CapstoneDF)
head(subset(CapstoneDF$Dates, CapstoneDF$Website=="Yelp"),n=10)
CapstoneDF$Dates <- gsub("\n *","",CapstoneDF$Dates)
head(subset(CapstoneDF$Dates, CapstoneDF$Website=="Yelp"),n=10)
UncleanDates <- CapstoneDF$Dates[!grepl("^[0-9].*[0-9]$",CapstoneDF$Dates)]
head(UncleanDates, n=20)
UncleanDates <- CapstoneDF$Dates[!grepl("^[0-9].*[0-9]$",CapstoneDF$Dates)]
head(UncleanDates, n=20)

RatingsNew <- read_html(page_url) %>% html_nodes(".rating-large") %>% html_attr("title")
DatesNew <- read_html(page_url) %>% html_nodes(".biz-rating-large .rating-qualifier") %>% html_text()
PrevRevNew <- read_html(page_url) %>% html_nodes(".biz-rating-large .rating-qualifier") %>% as.character()
print(paste("Scraping Yelp page",ceiling(ReviewCount/20)))
#Append new reviews/ratings to existing vectors
ReviewsYelp <- c(ReviewsYelp,ReviewsNew)
RatingsYelp <- c(RatingsYelp,RatingsNew)
DatesYelp <- c(DatesYelp, DatesNew)
PrevRevYelp <- c(PrevRevYelp,PrevRevNew)
#Increment the review counter to move to the next page in the following iteration
ReviewCount=ReviewCount +length(ReviewsNew)
#Loop ending condition
flag <- if(length(ReviewsNew)==0){0} else {1}
}
return(list(ReviewsYelp, RatingsYelp, DatesYelp, PrevRevYelp))
}
OpenTableScrape <- function(BaseURL) {
# Parameters
ReviewCount <- 1
ReviewsOpenTable <- character(0)
RatingsOpenTable <- character(0)
DatesOpenTable <- character(0)
todayDate <- Sys.Date()
flag <- 1
while(flag==1) {
#Get URL for current page
page_url <- paste(BaseURL_OpenTable,as.character(ReviewCount),sep="")
#Obtain ratings/reviews from page
ReviewsNew <- read_html(page_url) %>% html_nodes("#reviews-results .review-content") %>% html_text
RatingsNew <- read_html(page_url) %>% html_nodes("#reviews-results .filled") %>% html_attr("title")
DatesNew <- read_html(page_url) %>% html_nodes(".review-meta-separator+ .color-light") %>% html_text()
#Append ratings/reviews
ReviewsOpenTable <- c(ReviewsOpenTable,ReviewsNew)
RatingsOpenTable <- c(RatingsOpenTable,RatingsNew)
DatesOpenTable <- c(DatesOpenTable,DatesOpenTableNew)
print(paste("Scraping OpenTable page",ReviewCount))
#Increment counter
ReviewCount <- ReviewCount+1
#This condition checks whether we have reached the end of the reviews
flag <- if(length(ReviewsNew)==0){0} else {1}
}
return(list(ReviewsOpenTable, RatingsOpenTable, DatesOpenTable))
}
TripAdScrape <- function(LandingURL) {
#This gets the links to the review page, which are embedded in the review titles
ReviewTitleLink <- read_html(LandingURL_TripAd) %>% html_nodes(".quote a") %>% html_attr("href")
#The base URL to the first review page is
BaseURL_TripAd <- paste("https://www.tripadvisor.ca",ReviewTitleLink[1],sep="")
#Set parameters for data scraping.
ReviewCount <- 1
ReviewsTripAd <- character(0)
RatingsTripAd <- character(0)
DatesTripAd1 <- character(0)
DatesTripAd2 <- character(0)
flag <- 1
while(flag==1){
print(paste("Scraping Trip Advisor page",ReviewCount))
#For the first page, the URL we want to use is jsut the base URL. For subsequent
#iterations, we want to grab the hyperlink to the new page from the page links
#in the previous page. E.g. page 1 carries a link to page 2 in its HTML.
if(ReviewCount == 1){
page_url <- BaseURL_TripAd
} else {
#Grab the page numbers for the links
pagenum <- read_html(page_url) %>% html_nodes(".pageNum") %>% html_attr("data-page-number") %>% as.numeric()
#Grab the hyperlinks for the following pages
hyperlink <- read_html(page_url) %>% html_nodes(".pageNum") %>% html_attr("href") %>% as.character()
page_url <- paste("https://www.tripadvisor.ca",hyperlink[pagenum==ReviewCount],sep="")
}
#Read in reviews and ratings from current page
ReviewsNew <- read_html(page_url) %>% html_nodes("#REVIEWS p") %>% html_text()
RatingsNew <- read_html(page_url) %>% html_nodes("#REVIEWS .rating_s_fill") %>% html_attr("alt")
DatesNew1 <- read_html(page_url) %>% html_nodes(".relativeDate") %>% html_attr("title",default=NA_character_)
DatesNew2 <- read_html(page_url) %>% html_nodes(".ratingDate") %>% html_text()
#End loop condition
flag <- if(length(ReviewsNew)==0){0} else {1}
#Append new reviews/ratings
ReviewsTripAd <- c(ReviewsTripAd, ReviewsNew)
RatingsTripAd <- c(RatingsTripAd, RatingsNew)
DatesTripAd1 <- c(DatesTripAd1, DatesNew1)
DatesTripAd2 <- c(DatesTripAd2, DatesNew2)
#Increment page count
ReviewCount <- ReviewCount+1
}
return(list(ReviewsTripAd,RatingsTripAd, DatesTripAd1,DatesTripAd2))
}
BaseURL_Yelp <- "https://www.yelp.ca/biz/reds-midtown-tavern-toronto-2"
BaseURL_OpenTable <- "https://www.opentable.com/reds-midtown-tavern?covers=2&dateTime=2017-02-22+19%3A00%23reviews&page="
LandingURL_TripAd <- "https://www.tripadvisor.ca/Restaurant_Review-g155019-d5058760-Reviews-Reds_Midtown_Tavern-Toronto_Ontario.html"
YelpScrape(BaseURL_Yelp)
list[ReviewsYelp, RatingsYelp, DatesYelp, PrevRevYelp] <- YelpScrape(BaseURL_Yelp)
rm(list=ls())
library(rvest)
library(dplyr)
library(tidyr)
YelpScrape <- function(BaseURL) {
ReviewCount <- 0 #Counter for the number of reviews. On the Yelp there are 20 per page
#Empty character vectors for the reviews and ratings
ReviewsYelp <- character(0)
RatingsYelp <- character(0)
DatesYelp <- character(0)
PrevRevYelp <- character(0)
flag <- 1
#Now let's iterate over the different Yelp review pages and scrape the data.
while(flag==1){
#Yelp URL for the given review page
page_url <- paste(BaseURL_Yelp,"?start=",as.character(ReviewCount),sep="")
#Scrape the reviews and ratings from the current URL
ReviewsNew <- read_html(page_url) %>% html_nodes(".review-content p") %>% html_text
RatingsNew <- read_html(page_url) %>% html_nodes(".rating-large") %>% html_attr("title")
DatesNew <- read_html(page_url) %>% html_nodes(".biz-rating-large .rating-qualifier") %>% html_text()
PrevRevNew <- read_html(page_url) %>% html_nodes(".biz-rating-large .rating-qualifier") %>% as.character()
print(paste("Scraping Yelp page",ceiling(ReviewCount/20)))
#Append new reviews/ratings to existing vectors
ReviewsYelp <- c(ReviewsYelp,ReviewsNew)
RatingsYelp <- c(RatingsYelp,RatingsNew)
DatesYelp <- c(DatesYelp, DatesNew)
PrevRevYelp <- c(PrevRevYelp,PrevRevNew)
#Increment the review counter to move to the next page in the following iteration
ReviewCount=ReviewCount +length(ReviewsNew)
#Loop ending condition
flag <- if(length(ReviewsNew)==0){0} else {1}
}
return(list("reviews"=ReviewsYelp, "ratings"=RatingsYelp, "dates"=DatesYelp, "prevrev"=PrevRevYelp))
}
OpenTableScrape <- function(BaseURL) {
# Parameters
ReviewCount <- 1
ReviewsOpenTable <- character(0)
RatingsOpenTable <- character(0)
DatesOpenTable <- character(0)
todayDate <- Sys.Date()
flag <- 1
while(flag==1) {
#Get URL for current page
page_url <- paste(BaseURL_OpenTable,as.character(ReviewCount),sep="")
#Obtain ratings/reviews from page
ReviewsNew <- read_html(page_url) %>% html_nodes("#reviews-results .review-content") %>% html_text
RatingsNew <- read_html(page_url) %>% html_nodes("#reviews-results .filled") %>% html_attr("title")
DatesNew <- read_html(page_url) %>% html_nodes(".review-meta-separator+ .color-light") %>% html_text()
#Append ratings/reviews
ReviewsOpenTable <- c(ReviewsOpenTable,ReviewsNew)
RatingsOpenTable <- c(RatingsOpenTable,RatingsNew)
DatesOpenTable <- c(DatesOpenTable,DatesOpenTableNew)
print(paste("Scraping OpenTable page",ReviewCount))
#Increment counter
ReviewCount <- ReviewCount+1
#This condition checks whether we have reached the end of the reviews
flag <- if(length(ReviewsNew)==0){0} else {1}
}
return(list(ReviewsOpenTable, RatingsOpenTable, DatesOpenTable))
}
TripAdScrape <- function(LandingURL) {
#This gets the links to the review page, which are embedded in the review titles
ReviewTitleLink <- read_html(LandingURL_TripAd) %>% html_nodes(".quote a") %>% html_attr("href")
#The base URL to the first review page is
BaseURL_TripAd <- paste("https://www.tripadvisor.ca",ReviewTitleLink[1],sep="")
#Set parameters for data scraping.
ReviewCount <- 1
ReviewsTripAd <- character(0)
RatingsTripAd <- character(0)
DatesTripAd1 <- character(0)
DatesTripAd2 <- character(0)
flag <- 1
while(flag==1){
print(paste("Scraping Trip Advisor page",ReviewCount))
#For the first page, the URL we want to use is jsut the base URL. For subsequent
#iterations, we want to grab the hyperlink to the new page from the page links
#in the previous page. E.g. page 1 carries a link to page 2 in its HTML.
if(ReviewCount == 1){
page_url <- BaseURL_TripAd
} else {
#Grab the page numbers for the links
pagenum <- read_html(page_url) %>% html_nodes(".pageNum") %>% html_attr("data-page-number") %>% as.numeric()
#Grab the hyperlinks for the following pages
hyperlink <- read_html(page_url) %>% html_nodes(".pageNum") %>% html_attr("href") %>% as.character()
page_url <- paste("https://www.tripadvisor.ca",hyperlink[pagenum==ReviewCount],sep="")
}
#Read in reviews and ratings from current page
ReviewsNew <- read_html(page_url) %>% html_nodes("#REVIEWS p") %>% html_text()
RatingsNew <- read_html(page_url) %>% html_nodes("#REVIEWS .rating_s_fill") %>% html_attr("alt")
DatesNew1 <- read_html(page_url) %>% html_nodes(".relativeDate") %>% html_attr("title",default=NA_character_)
DatesNew2 <- read_html(page_url) %>% html_nodes(".ratingDate") %>% html_text()
#End loop condition
flag <- if(length(ReviewsNew)==0){0} else {1}
#Append new reviews/ratings
ReviewsTripAd <- c(ReviewsTripAd, ReviewsNew)
RatingsTripAd <- c(RatingsTripAd, RatingsNew)
DatesTripAd1 <- c(DatesTripAd1, DatesNew1)
DatesTripAd2 <- c(DatesTripAd2, DatesNew2)
#Increment page count
ReviewCount <- ReviewCount+1
}
return(list(ReviewsTripAd,RatingsTripAd, DatesTripAd1,DatesTripAd2))
}
BaseURL_Yelp <- "https://www.yelp.ca/biz/reds-midtown-tavern-toronto-2"
BaseURL_OpenTable <- "https://www.opentable.com/reds-midtown-tavern?covers=2&dateTime=2017-02-22+19%3A00%23reviews&page="
LandingURL_TripAd <- "https://www.tripadvisor.ca/Restaurant_Review-g155019-d5058760-Reviews-Reds_Midtown_Tavern-Toronto_Ontario.html"
x <- YelpScrape(BaseURL_Yelp)
x
x[1]
rm(list=ls())
library(rvest)
library(dplyr)
library(tidyr)
YelpScrape <- function(BaseURL) {
ReviewCount <- 0 #Counter for the number of reviews. On the Yelp there are 20 per page
#Empty character vectors for the reviews and ratings
Reviews <- character(0)
Ratings <- character(0)
Dates <- character(0)
PrevRev <- character(0)
flag <- 1
#Now let's iterate over the different Yelp review pages and scrape the data.
while(flag==1){
#Yelp URL for the given review page
page_url <- paste(BaseURL,"?start=",as.character(ReviewCount),sep="")
#Scrape the reviews and ratings from the current URL
ReviewsNew <- read_html(page_url) %>% html_nodes(".review-content p") %>% html_text
RatingsNew <- read_html(page_url) %>% html_nodes(".rating-large") %>% html_attr("title")
DatesNew <- read_html(page_url) %>% html_nodes(".biz-rating-large .rating-qualifier") %>% html_text()
PrevRevNew <- read_html(page_url) %>% html_nodes(".biz-rating-large .rating-qualifier") %>% as.character()
print(paste("Scraping Yelp page",ceiling(ReviewCount/20)))
#Append new reviews/ratings to existing vectors
Reviews <- c(Reviews,ReviewsNew)
Ratings <- c(Ratings,RatingsNew)
Dates <- c(Dates, DatesNew)
PrevRev <- c(PrevRev,PrevRevNew)
#Increment the review counter to move to the next page in the following iteration
ReviewCount=ReviewCount +length(ReviewsNew)
#Loop ending condition
flag <- if(length(ReviewsNew)==0){0} else {1}
}
return(list("Reviews"=Reviews, "Ratings"=Ratings, "Dates"=Dates, "PrevRev"=PrevRev))
}
OpenTableScrape <- function(BaseURL) {
# Parameters
ReviewCount <- 1
Reviews <- character(0)
Ratings <- character(0)
Dates <- character(0)
todayDate <- Sys.Date()
flag <- 1
while(flag==1) {
#Get URL for current page
page_url <- paste(BaseURL,as.character(ReviewCount),sep="")
#Obtain ratings/reviews from page
ReviewsNew <- read_html(page_url) %>% html_nodes("#reviews-results .review-content") %>% html_text
RatingsNew <- read_html(page_url) %>% html_nodes("#reviews-results .filled") %>% html_attr("title")
DatesNew <- read_html(page_url) %>% html_nodes(".review-meta-separator+ .color-light") %>% html_text()
#Append ratings/reviews
Reviews <- c(Reviews,ReviewsNew)
Ratings <- c(Ratings,RatingsNew)
Dates <- c(Dates,DatesNew)
print(paste("Scraping OpenTable page",ReviewCount))
#Increment counter
ReviewCount <- ReviewCount+1
#This condition checks whether we have reached the end of the reviews
flag <- if(length(ReviewsNew)==0){0} else {1}
}
return(list("Reviews"=Reviews, "Ratings"=Ratings, "Dates"=Dates))
}
TripAdScrape <- function(LandingURL) {
#This gets the links to the review page, which are embedded in the review titles
ReviewTitleLink <- read_html(LandingURL) %>% html_nodes(".quote a") %>% html_attr("href")
#The base URL to the first review page is
BaseURL <- paste("https://www.tripadvisor.ca",ReviewTitleLink[1],sep="")
#Set parameters for data scraping.
ReviewCount <- 1
Reviews <- character(0)
Ratings <- character(0)
Dates1 <- character(0)
Dates2 <- character(0)
flag <- 1
while(flag==1){
print(paste("Scraping Trip Advisor page",ReviewCount))
#For the first page, the URL we want to use is jsut the base URL. For subsequent
#iterations, we want to grab the hyperlink to the new page from the page links
#in the previous page. E.g. page 1 carries a link to page 2 in its HTML.
if(ReviewCount == 1){
page_url <- BaseURL_TripAd
} else {
#Grab the page numbers for the links
pagenum <- read_html(page_url) %>% html_nodes(".pageNum") %>% html_attr("data-page-number") %>% as.numeric()
#Grab the hyperlinks for the following pages
hyperlink <- read_html(page_url) %>% html_nodes(".pageNum") %>% html_attr("href") %>% as.character()
page_url <- paste("https://www.tripadvisor.ca",hyperlink[pagenum==ReviewCount],sep="")
}
#Read in reviews and ratings from current page
ReviewsNew <- read_html(page_url) %>% html_nodes("#REVIEWS p") %>% html_text()
RatingsNew <- read_html(page_url) %>% html_nodes("#REVIEWS .rating_s_fill") %>% html_attr("alt")
DatesNew1 <- read_html(page_url) %>% html_nodes(".relativeDate") %>% html_attr("title",default=NA_character_)
DatesNew2 <- read_html(page_url) %>% html_nodes(".ratingDate") %>% html_text()
#End loop condition
flag <- if(length(ReviewsNew)==0){0} else {1}
#Append new reviews/ratings
Reviews <- c(Reviews, ReviewsNew)
Ratings <- c(Ratings, RatingsNew)
Dates1 <- c(Dates1, DatesNew1)
Dates2 <- c(Dates2, DatesNew2)
#Increment page count
ReviewCount <- ReviewCount+1
}
return(list("Reviews"=Reviews,"Ratings"=Ratings, "Dates1"=Dates1,"Dates2"=Dates2))
}
BaseURL_Yelp <- "https://www.yelp.ca/biz/reds-midtown-tavern-toronto-2"
BaseURL_OpenTable <- "https://www.opentable.com/reds-midtown-tavern?covers=2&dateTime=2017-02-22+19%3A00%23reviews&page="
LandingURL_TripAd <- "https://www.tripadvisor.ca/Restaurant_Review-g155019-d5058760-Reviews-Reds_Midtown_Tavern-Toronto_Ontario.html"
YelpData <- YelpScrape(BaseURL_Yelp)
OpenTableData <- OpenTableScrape(BaseURL_OpenTable)
OpenTableData$Dates[1:20]
YelpData$Dates[1:20]
TripAdData <- TripAdScrape(LandingURL_TripAd)
TripAdData <- TripAdScrape(LandingURL_TripAd)
TripAdScrape <- function(LandingURL) {
#This gets the links to the review page, which are embedded in the review titles
ReviewTitleLink <- read_html(LandingURL) %>% html_nodes(".quote a") %>% html_attr("href")
#The base URL to the first review page is
BaseURL <- paste("https://www.tripadvisor.ca",ReviewTitleLink[1],sep="")
#Set parameters for data scraping.
ReviewCount <- 1
Reviews <- character(0)
Ratings <- character(0)
Dates1 <- character(0)
Dates2 <- character(0)
flag <- 1
while(flag==1){
print(paste("Scraping Trip Advisor page",ReviewCount))
#For the first page, the URL we want to use is jsut the base URL. For subsequent
#iterations, we want to grab the hyperlink to the new page from the page links
#in the previous page. E.g. page 1 carries a link to page 2 in its HTML.
if(ReviewCount == 1){
page_url <- BaseURL
} else {
#Grab the page numbers for the links
pagenum <- read_html(page_url) %>% html_nodes(".pageNum") %>% html_attr("data-page-number") %>% as.numeric()
#Grab the hyperlinks for the following pages
hyperlink <- read_html(page_url) %>% html_nodes(".pageNum") %>% html_attr("href") %>% as.character()
page_url <- paste("https://www.tripadvisor.ca",hyperlink[pagenum==ReviewCount],sep="")
}
#Read in reviews and ratings from current page
ReviewsNew <- read_html(page_url) %>% html_nodes("#REVIEWS p") %>% html_text()
RatingsNew <- read_html(page_url) %>% html_nodes("#REVIEWS .rating_s_fill") %>% html_attr("alt")
DatesNew1 <- read_html(page_url) %>% html_nodes(".relativeDate") %>% html_attr("title",default=NA_character_)
DatesNew2 <- read_html(page_url) %>% html_nodes(".ratingDate") %>% html_text()
#End loop condition
flag <- if(length(ReviewsNew)==0){0} else {1}
#Append new reviews/ratings
Reviews <- c(Reviews, ReviewsNew)
Ratings <- c(Ratings, RatingsNew)
Dates1 <- c(Dates1, DatesNew1)
Dates2 <- c(Dates2, DatesNew2)
#Increment page count
ReviewCount <- ReviewCount+1
}
return(list("Reviews"=Reviews,"Ratings"=Ratings, "Dates1"=Dates1,"Dates2"=Dates2))
}
TripAdData <- TripAdScrape(LandingURL_TripAd)
TripAdData$Dates1
TripAdData$Dates2[1:20]
test <- data.frame(YelpData$Reviews,YelpData$Ratings)
test <- data.frame(YelpData$Reviews)
YelpDF1 <- data.frame(YelpData$Reviews)
YelpDF2 <- data.frame(YelpData$Ratings,YelpData$Dates,YelpData$PrevRev)
head(YelpDF2)
YelpDF1 <- data.frame(Reviews=YelpData$Reviews)
YelpDF1 <- data.frame(YelpReviews=YelpData$Reviews)
YelpDF2 <- data.frame(YelpRatings=YelpData$Ratings,YelpDates=YelpData$Dates,YelpPrevRev=YelpData$PrevRev)
head(YelpDF2)
YelpDF <- merge(YelpDF1,YelpDF2,all=TRUE)
View(YelpDF)
YelpData$Dates[1:20]
YelpDF2$YelpDates[1:20]
YelpData$PrevRev[1:40]
grepl("has-previous-review",YelpData$PrevRev)
~grepl("has-previous-review",YelpData$PrevRev)
grepl("has-previous-review",YelpData$PrevRev)
grepl("has-previous-review",YelpData$PrevRev) == FALSE
YelpData$Ratings[grepl("has-previous-review",YelpData$PrevRev) == FALSE]
NoPrevRev <- grepl("has-previous-review",YelpData$PrevRev) == FALSE
YelpData$Ratings <- YelpData$Ratings[NoPrevRev]
YelpData$Dates <- YelpData$Dates[NoPrevRev]
YelpDF <- data_frame(YelpData$Reviews,YelpData$Ratings,YelpData$Dates)
View(YelpDF)
YelpVec <- rep("Yelp",length(YelpData$Reviews))
head(YelpVec)
NoPrevRev <- grepl("has-previous-review",YelpData$PrevRev) == FALSE
YelpData$Ratings <- YelpData$Ratings[NoPrevRev]
YelpData$Dates <- YelpData$Dates[NoPrevRev]
YelpVec <- rep("Yelp",length(YelpData$Reviews))
YelpDF <- data_frame(Reviews=YelpData$Reviews,Reviews=RatingsYelpData$Ratings,Dates=YelpData$Dates, Website=YelpVec)
rm(list=ls())
library(rvest)
library(dplyr)
library(tidyr)
BaseURL_Yelp <- "https://www.yelp.ca/biz/reds-midtown-tavern-toronto-2"
YelpData <- YelpScrape(BaseURL_Yelp)
rm(list=ls())
library(rvest)
library(dplyr)
library(tidyr)
YelpScrape <- function(BaseURL) {
ReviewCount <- 0 #Counter for the number of reviews. On the Yelp there are 20 per page
#Empty character vectors for the reviews and ratings
Reviews <- character(0)
Ratings <- character(0)
Dates <- character(0)
PrevRev <- character(0)
flag <- 1
#Now let's iterate over the different Yelp review pages and scrape the data.
while(flag==1){
#Yelp URL for the given review page
page_url <- paste(BaseURL,"?start=",as.character(ReviewCount),sep="")
#Scrape the reviews and ratings from the current URL
ReviewsNew <- read_html(page_url) %>% html_nodes(".review-content p") %>% html_text
RatingsNew <- read_html(page_url) %>% html_nodes(".rating-large") %>% html_attr("title")
DatesNew <- read_html(page_url) %>% html_nodes(".biz-rating-large .rating-qualifier") %>% html_text()
PrevRevNew <- read_html(page_url) %>% html_nodes(".biz-rating-large .rating-qualifier") %>% as.character()
print(paste("Scraping Yelp page",ceiling(ReviewCount/20)))
#Append new reviews/ratings to existing vectors
Reviews <- c(Reviews,ReviewsNew)
Ratings <- c(Ratings,RatingsNew)
Dates <- c(Dates, DatesNew)
PrevRev <- c(PrevRev,PrevRevNew)
#Increment the review counter to move to the next page in the following iteration
ReviewCount=ReviewCount +length(ReviewsNew)
#Loop ending condition
flag <- if(length(ReviewsNew)==0){0} else {1}
}
return(list("Reviews"=Reviews, "Ratings"=Ratings, "Dates"=Dates, "PrevRev"=PrevRev))
}
BaseURL_Yelp <- "https://www.yelp.ca/biz/reds-midtown-tavern-toronto-2"
YelpData <- YelpScrape(BaseURL_Yelp)
NoPrevRev <- grepl("has-previous-review",YelpData$PrevRev) == FALSE
YelpData$Ratings <- YelpData$Ratings[NoPrevRev]
YelpData$Dates <- YelpData$Dates[NoPrevRev]
YelpVec <- rep("Yelp",length(YelpData$Reviews))
YelpDF <- data_frame(Reviews=YelpData$Reviews,Reviews=RatingsYelpData$Ratings,Dates=YelpData$Dates, Website=YelpVec)
YelpDF <- data_frame(Reviews=YelpData$Reviews,Ratings=YelpData$Ratings,Dates=YelpData$Dates, Website=YelpVec)
str(YelpDF)
OpenTableScrape <- function(BaseURL) {
# Parameters
ReviewCount <- 1
Reviews <- character(0)
Ratings <- character(0)
Dates <- character(0)
todayDate <- Sys.Date()
flag <- 1
while(flag==1) {
#Get URL for current page
page_url <- paste(BaseURL,as.character(ReviewCount),sep="")
#Obtain ratings/reviews from page
ReviewsNew <- read_html(page_url) %>% html_nodes("#reviews-results .review-content") %>% html_text
RatingsNew <- read_html(page_url) %>% html_nodes("#reviews-results .filled") %>% html_attr("title")
DatesNew <- read_html(page_url) %>% html_nodes(".review-meta-separator+ .color-light") %>% html_text()
#Append ratings/reviews
Reviews <- c(Reviews,ReviewsNew)
Ratings <- c(Ratings,RatingsNew)
Dates <- c(Dates,DatesNew)
print(paste("Scraping OpenTable page",ReviewCount))
#Increment counter
ReviewCount <- ReviewCount+1
#This condition checks whether we have reached the end of the reviews
flag <- if(length(ReviewsNew)==0){0} else {1}
}
return(list("Reviews"=Reviews, "Ratings"=Ratings, "Dates"=Dates))
}
TripAdScrape <- function(LandingURL) {
#This gets the links to the review page, which are embedded in the review titles
ReviewTitleLink <- read_html(LandingURL) %>% html_nodes(".quote a") %>% html_attr("href")
#The base URL to the first review page is
BaseURL <- paste("https://www.tripadvisor.ca",ReviewTitleLink[1],sep="")
#Set parameters for data scraping.
ReviewCount <- 1
Reviews <- character(0)
Ratings <- character(0)
Dates1 <- character(0)
Dates2 <- character(0)
flag <- 1
while(flag==1){
print(paste("Scraping Trip Advisor page",ReviewCount))
#For the first page, the URL we want to use is jsut the base URL. For subsequent
#iterations, we want to grab the hyperlink to the new page from the page links
#in the previous page. E.g. page 1 carries a link to page 2 in its HTML.
if(ReviewCount == 1){
page_url <- BaseURL
} else {
#Grab the page numbers for the links
pagenum <- read_html(page_url) %>% html_nodes(".pageNum") %>% html_attr("data-page-number") %>% as.numeric()
#Grab the hyperlinks for the following pages
hyperlink <- read_html(page_url) %>% html_nodes(".pageNum") %>% html_attr("href") %>% as.character()
page_url <- paste("https://www.tripadvisor.ca",hyperlink[pagenum==ReviewCount],sep="")
}
#Read in reviews and ratings from current page
ReviewsNew <- read_html(page_url) %>% html_nodes("#REVIEWS p") %>% html_text()
RatingsNew <- read_html(page_url) %>% html_nodes("#REVIEWS .rating_s_fill") %>% html_attr("alt")
DatesNew1 <- read_html(page_url) %>% html_nodes(".relativeDate") %>% html_attr("title",default=NA_character_)
DatesNew2 <- read_html(page_url) %>% html_nodes(".ratingDate") %>% html_text()
#End loop condition
flag <- if(length(ReviewsNew)==0){0} else {1}
#Append new reviews/ratings
Reviews <- c(Reviews, ReviewsNew)
Ratings <- c(Ratings, RatingsNew)
Dates1 <- c(Dates1, DatesNew1)
Dates2 <- c(Dates2, DatesNew2)
#Increment page count
ReviewCount <- ReviewCount+1
}
return(list("Reviews"=Reviews,"Ratings"=Ratings, "Dates1"=Dates1,"Dates2"=Dates2))
}
View(YelpDF)
quit("no")

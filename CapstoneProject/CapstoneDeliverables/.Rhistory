CapstoneDF$Dates[OpenTableDateRegex] %>%
as.Date(format="%B %d, %Y")
#TripAdvisor date format:
head(subset(CapstoneDF$Dates, CapstoneDF$Website=="TripAdvisor"))
#grep for TripAdvisor dates and express as date variable
TripAdRegex <-
grep("^[0-9]+ ([Jj]|[Ff]|[Mm]|[Aa]|[Jj]|[Ss]|[Oo]|[Nn]|[Dd]).+[0-9]+$",
CapstoneDF$Dates)
CapstoneDF$Dates[TripAdRegex] <-
CapstoneDF$Dates[TripAdRegex] %>%
as.Date(format="%d %B %Y")
CapstoneDF$Dates[which(CapstoneDF$Website == "Zomato")] <-
CapstoneDF$Dates[which(CapstoneDF$Website == "Zomato")] %>%
as.Date()
class(CapstoneDF$Dates) <- "Date"
str(CapstoneDF$Dates, width=70, strict.width="cut")
#Yelp ratings
head(subset(CapstoneDF$Ratings, CapstoneDF$Website=="Yelp"))
#Get rid of "star rating"
CapstoneDF$Ratings <- gsub("star rating","",CapstoneDF$Ratings)
#Open Table ratings
head(subset(CapstoneDF$Ratings, CapstoneDF$Website=="OpenTable"))
#TripAdvisor ratings
head(subset(CapstoneDF$Ratings, CapstoneDF$Website=="TripAdvisor"), n=4)
#Get rid of "of 5 bubbles"
CapstoneDF$Ratings <- gsub("of [0-9] bubbles","",CapstoneDF$Ratings)
#Zomato ratings
head(subset(CapstoneDF$Ratings, CapstoneDF$Website=="Zomato"))
#Get rid of "Rated "
CapstoneDF$Ratings <- gsub("Rated ","",CapstoneDF$Ratings)
#Impose numeric class
class(CapstoneDF$Ratings) <- "numeric"
str(CapstoneDF$Ratings)
#Convert Websites to factor
CapstoneDF$Website <-
factor(CapstoneDF$Website,order=FALSE,
levels=c("Yelp","OpenTable","Zomato","TripAdvisor"))
str(CapstoneDF$Website)
levels(CapstoneDF$Website)
#Remove newline characters from reviews
CapstoneDF$Reviews <- gsub("\n","",CapstoneDF$Reviews)
#Clean up Zomato reviews by removing the "Rated" beginning
head(subset(CapstoneDF$Reviews,CapstoneDF$Website=="Zomato"), n=2) %>%
strtrim(65)
CapstoneDF$Reviews <- gsub(" +Rated *","",CapstoneDF$Reviews)
write_csv(CapstoneDF, "./Data/CapstoneCleanData.csv")
#Load libraries
library(readr)
library(dplyr)
library(tidyr)
#Read in clean data
CapstoneDF <- read_csv("./Data/CapstoneCleanData.csv")
#Summary of data frame
glimpse(CapstoneDF)
#Create variable describing annual quarters: Quarters
CapstoneDF <- CapstoneDF  %>% mutate(Quarters = quarters.Date(Dates))
#Separate Dates variable into Year, Month, Day variables
CapstoneDF <- CapstoneDF %>% separate(Dates, c("Year","Month","Day"))
#Create variable that describes Month and Year together: YearMonth
tempdf <- CapstoneDF %>% unite("YearMonth", Year, Month, sep="-")
CapstoneDF$YearMonth <- tempdf$YearMonth
#Create variable that describes Quarters and Year together: YearQuarters
tempdf <- CapstoneDF %>% unite("YearQuarters", Year, Quarters, sep="-")
CapstoneDF$YearQuarters <- tempdf$YearQuarters
#Convert Website and Quarters to factor class
CapstoneDF$Website <- factor(CapstoneDF$Website)
CapstoneDF$Quarters <- factor(CapstoneDF$Quarters)
#Create new variables
# Review count by year
t1 <- CapstoneDF %>% group_by(Year) %>% summarise(countYear=n())
CapstoneDF <- left_join(CapstoneDF,t1, by="Year")
#Review count by quarters
t2 <- CapstoneDF %>% group_by(YearQuarters) %>% summarise(countQuarters=n())
CapstoneDF <- left_join(CapstoneDF,t2, by="YearQuarters")
#Review count by month
t3 <- CapstoneDF %>% group_by(YearMonth) %>% summarise(countMonth=n())
CapstoneDF <- left_join(CapstoneDF,t3, by="YearMonth")
head(CapstoneDF[-1])
library(ggplot2)
library(ggthemes)
mean(CapstoneDF$Ratings)
CapstoneDF$RatingsAvg <-
rep(mean(CapstoneDF$Ratings), length(CapstoneDF$Ratings))
#Ratings aggregated by Year
mytheme <-   theme(panel.background = element_rect(fill="gray92", colour = "black", size = 0.6),
axis.line = element_line(colour = "black", size=0.2),
axis.text = element_text(face="bold"),
axis.title = element_text(size=12),
plot.margin = margin(t=1, r=1, b=1, l=1))
#legend.title = element_text(face="bold"))
ggplot(CapstoneDF, aes(x=Year, y=Ratings)) +
geom_line(aes(y=RatingsAvg, group=1), linetype="dashed",
colour="black", alpha=0.5) +
stat_summary(aes(size=countYear), fun.y=mean, geom="point", col="skyblue3", alpha=1.0) +
#coord_cartesian(ylim=c(2.5,4.5)) +
scale_size_continuous(range=c(3,7), guide=guide_legend(title="Review Count")) +
coord_cartesian(ylim=c(3.0,4.5)) + mytheme
#Ratings aggregated by Year and Quarters
global_p2 <- ggplot(CapstoneDF, aes(x=YearQuarters, y=Ratings,col=Year)) +
geom_line(aes(y=RatingsAvg, group=1), linetype="dashed",
colour="black", alpha=0.5) +
stat_summary(aes(size=countQuarters), fun.y=mean, geom="point", alpha=0.9) +
#coord_cartesian(ylim=c(2.5,4.5)) +
coord_cartesian(ylim=c(3.0,4.5)) +
scale_size_continuous(range=c(3,9), guide = guide_legend(title="Review Count")) +
theme(axis.text.x =element_text(angle=90)) + mytheme + labs(x="Yearly Quarters", y="Customer Ratings") + mytheme
global_p2
global_p3 <- ggplot(CapstoneDF, aes(x=YearMonth, y=Ratings, col=Year)) +
geom_line(aes(y=RatingsAvg, group=1), linetype="dashed",
colour="black", alpha=0.5) +
stat_summary(aes(size=countMonth),fun.y=mean, geom="point", alpha=0.8) +
coord_cartesian(ylim=c(2.5,4.5)) +
scale_size_continuous(range=c(3,8), guide = guide_legend(title="Review Count")) +
theme(axis.text.x =element_text(angle=90, size=6, face = "bold")) +
mytheme + labs(x="Month")
global_p3
perc1 <- round(length(subset(CapstoneDF$Ratings, ceiling(CapstoneDF$Ratings)==1))/dim(CapstoneDF)[1],2)
perc2 <- round(length(subset(CapstoneDF$Ratings, ceiling(CapstoneDF$Ratings)==2))/dim(CapstoneDF)[1],2)
perc3 <- round(length(subset(CapstoneDF$Ratings, ceiling(CapstoneDF$Ratings)==3))/dim(CapstoneDF)[1],2)
perc4 <- round(length(subset(CapstoneDF$Ratings, ceiling(CapstoneDF$Ratings)==4))/dim(CapstoneDF)[1],2)
perc5 <- round(length(subset(CapstoneDF$Ratings, ceiling(CapstoneDF$Ratings)==5))/dim(CapstoneDF)[1],2)
t <- CapstoneDF %>% group_by(ceiling(Ratings)) %>% summarise(count = n())
t$count <- round(t$count/dim(CapstoneDF)[1],2)
names(t)[1] <- "Ratings"
global_p4 <- ggplot(CapstoneDF, aes(x=ceiling(Ratings))) + geom_bar(aes(y=..count../sum(..count..)), fill="skyblue3", col="navy", alpha=0.9) +
mytheme + labs(x="Ratings", y="Review Fraction") + geom_text(data=t, aes(label=count, y=count), vjust=2, fontface="bold", size=4)
global_p4
global_p7 <- ggplot(CapstoneDF, aes(ceiling(Ratings), y=..density.., col=Year)) +
geom_histogram(binwidth=1, alpha=1.0, fill="grey60", size=0.75) +
facet_grid(.~Year) + mytheme + labs(x="Ratings", y="Review Fraction") +
mytheme + theme(strip.text = element_text(face = "bold")) +
theme(strip.background = element_rect(colour = "black"), legend.position = "none")
global_p7
#Percentage time series analysis.
yearVec <- sort(unique(as.numeric(CapstoneDF$Year)))
#Build temporary data frame and round up Ratings
CapstoneDF_t <- CapstoneDF
CapstoneDF_t$Ratings <- ceiling(CapstoneDF_t$Ratings)
#Build data frames for rating counts by year
d1 <- CapstoneDF_t %>% group_by(Year,Ratings) %>% summarise(countRatings=n())
d2 <- CapstoneDF_t %>% group_by(Year) %>% summarise(countYear=n())
#Join data frames for ratings count and year counts
percentData <- left_join(d1,d2, by="Year")
percentData$Ratings <- ceiling(percentData$Ratings)
#Create observations for instances when no ratings of that number of stars have been observed
vec2 <- NULL
for(i in 1:length(yearVec)){
vec <- percentData$Ratings %>% subset(percentData$Year == yearVec[i])
if(!(1 %in% vec)){
yearCount <- subset(percentData$countYear, percentData$Year==yearVec[i])[1]
vec2 <- data.frame(Year=as.character(yearVec[i]), Ratings=as.numeric(1), countRatings=as.integer(0), countYear=as.integer(yearCount))
percentData <- (bind_rows(vec2, as.data.frame(percentData)))
}
}
#Calculate ratings percentages
percentData <- percentData %>% arrange(Ratings) %>%  mutate(percentRatings = countRatings/countYear)
#Select columns
percentData <- percentData %>% select(Year,Ratings,percentRatings, countYear) %>% arrange(Year,Ratings)
#Treat Ratings as ordinal variables
percentData$Ratings <- factor(percentData$Ratings)
ggplot(percentData, aes(x=Year, y=percentRatings, group=Ratings)) +
geom_smooth(data=subset(percentData, percentData$Ratings==1), method="lm", se=T, formula=y~poly(x,2, raw=TRUE), linetype="dashed", size=0.5, alpha=0.15, col="black") +
geom_smooth(data=subset(percentData, percentData$Ratings==2), method="lm", se=T, formula=y~poly(x,1, raw=TRUE), linetype="dashed", size=0.5, alpha=0.15, col="black") +
geom_smooth(data=subset(percentData, percentData$Ratings==3), method="lm", se=T, formula=y~poly(x,1, raw=TRUE), linetype="dashed", size=0.5, alpha=0.15, col="black") +
geom_smooth(data=subset(percentData, percentData$Ratings==4), method="lm", se=T, formula=y~poly(x,2, raw=TRUE), linetype="dashed", size=0.5, alpha=0.15, col="black") +
geom_smooth(data=subset(percentData, percentData$Ratings==5), method="lm", se=T, formula=y~poly(x,2, raw=TRUE), linetype="dashed", size=0.5, alpha=0.15, col="black") +
geom_point(aes(col=Ratings,  size=countYear), alpha=0.9) +
scale_size_continuous(range=c(3,7), guide = guide_legend(title = "Review Count")) + scale_fill_brewer(palette=1) +
mytheme + labs(y="Review Fraction")
library(tm)
library(wordcloud)
library(syuzhet)
# Function: WordCloudAnalysis
#
# This function takes a dataset containing customer reviews and prepares the data for text analysis using the tm package.
# analysis
# Input: Data frame containing Review variable that has customer reviews
# Output: List containing text analytics properties of reviews such as Corpus, Term Document Matrix, and word freqneucies.
#
TextAnalysis <- function(dataset, use.sentences=TRUE){
#Remove "The" or "the"  from reviews, since the tm_map() function below doesn't do it.
dataset$Reviews <- gsub("[Tt]he", "", dataset$Reviews)
#Options to split review text into individual sentences. This improves the use of the findAssocs() function later on.
if(use.sentences==TRUE){
dataCorpus <- get_sentences(dataset$Reviews) %>% VectorSource %>% Corpus()
}
else {
#Create corpus from the full text data
dataCorpus <- dataset$Reviews %>% VectorSource() %>% Corpus()
}
#Remove punctuation and english stopwords from text data
dataCorpus <- dataCorpus %>%
tm_map(removePunctuation) %>%
tm_map(removeWords, stopwords("english")) %>%
tm_map(content_transformer(tolower))
#Create term document matrix and convert to matrix class.
TDM <- TermDocumentMatrix(dataCorpus)
TDM_m <- TDM %>% as.matrix()
#Compute word frequencies from TDM.
wFreqs = sort(rowSums(TDM_m), decreasing=TRUE)
return(list("Corpus" = dataCorpus, "TDM"=TDM, "wordFreq"=wFreqs))
}
#Word analysis
Capstone_wA <- TextAnalysis(CapstoneDF)
#Generate wordcloud
wordcloud(Capstone_wA$Corpus, max.word=100, random.order=F, scale=c(2,0.5), colors=brewer.pal(8, "Dark2"))
revCount <- function(grepVec, revVec,wordFreq){
percVec <- numeric(length(grepVec))
numVec <- numeric(length(grepVec))
for(i in 1:length(grepVec)){
numVec[i] <- length(revVec[grepl(grepVec[i],revVec)])
percVec[i] <- length(revVec[grepl(grepVec[i], revVec)])/length(revVec)
}
df <- data_frame("word"=names(wordFreq[1:length(grepVec)]),
"reviewCount"=round(numVec,2),
"reviewFraction"=round(percVec,2))
return(df)
}
grepvec <- c("[Ff]ood", "[Gg]ood", "[Gg]reat", "[Ss]ervice",
"[Rr][Ee][Dd][Ss]", "[Pp]lace", "[Mm]enu",
"[Bb]ack", "[Nn]ice", "[Tt]ime")
df_global <- revCount(grepvec, CapstoneDF$Reviews, Capstone_wA$wordFreq)
ggplot(df_global, aes(x=word, y=reviewFraction)) +
geom_bar(fill="skyblue3", col="navy", stat="identity", alpha=0.9) +
geom_text(aes(label=reviewFraction), vjust=2, fontface="bold") + theme(axis.text.x =element_text(angle=90)) + mytheme + labs(x="Word", y="Review Fraction")
findAssocs(Capstone_wA$TDM, "food", .18)
findAssocs(Capstone_wA$TDM, "service", 0.15)
findAssocs(Capstone_wA$TDM, c("good","great"), c(0.15, 0.10))
#Associations with "reds"
findAssocs(Capstone_wA$TDM, "reds", 0.20)
datasentiments <- get_nrc_sentiment(CapstoneDF$Reviews)
sentimentTotals <- data.frame(colSums(datasentiments))
names(sentimentTotals) <- "count"
sentimentTotals <- cbind("sentiment" = rownames(sentimentTotals), sentimentTotals)
rownames(sentimentTotals) <- NULL
ggplot(data = sentimentTotals[1:8,], aes(x = sentiment, y = count)) +
#geom_bar(fill="skyblue3", col="navy", stat="identity", alpha=0.9) +
geom_bar(aes(fill=sentiment), stat="identity", col="navy", alpha=0.9) +
geom_text(aes(label=count), vjust=2, size=3, fontface="bold") +
theme(legend.position = "none") +
xlab("Sentiment") + ylab("Total Count") + mytheme
#Break data into positive and negative reviews
CapstoneDF_pos <- CapstoneDF %>% subset(Ratings > 3)
CapstoneDF_neg <- CapstoneDF %>% subset(Ratings <= 3)
#Perform text analytics on pos and neg reviews
CapstonePos_wA <- TextAnalysis(CapstoneDF_pos)
CapstoneNeg_wA <- TextAnalysis(CapstoneDF_neg)
#Generate wordcloud
wordcloud(CapstonePos_wA$Corpus, max.word=100, random.order=F, scale=c(2,0.5), colors=brewer.pal(9, "GnBu")[5:9])
#Generate wordcloud
wordcloud(CapstoneNeg_wA$Corpus, max.word=100, random.order=F, scale=c(2,0.5), colors=brewer.pal(9, "OrRd")[3:9])
str_break = function(x, width = 60L) {
n = nchar(x)
if (n <= width) return(x)
n1 = seq(1L, n, by = width)
n2 = seq(width, n, by = width)
if (n %% width != 0) n2 = c(n2, n)
substring(x, n1, n2)
}
set.seed(1)
tvec <-
CapstoneDF_neg$Reviews[grepl("[Gg]ood", CapstoneDF_neg$Reviews)] %>%
sample(5)
str_break(tvec[1])
str_break(tvec[2])
str_break(tvec[3])
str_break(tvec[4])
grepVec_pos <- c("[Ff]ood", "[Gg]reat", "[Gg]ood", "[Ss]ervice",
"[Rr][Ee][Dd][Ss]", "[Mm]enu", "[Pp]lace",
"[Rr]eally", "[Bb]ack", "[Dd]elicious", "[Ss]taff",
"[Ff]riendly", "[Nn]ice","[Tt]ime", "[Ee]xcellent")
df_pos <- revCount(grepVec_pos, CapstoneDF_pos$Reviews, CapstonePos_wA$wordFreq)
grepVec_neg <- c("[Ff]ood", "[Gg]ood", "[Ss]ervice", "[Pp]lace",
"[Jj]ust", "[Gg]reat","[Tt]able","[Rr]estaurant",
"[Tt]ime", "[Nn]ice", "[Rr][Ee][Dd][Ss]", "[Bb]ack",
"[Mm]enu", "[Oo]rdered", "[Cc]ame")
df_neg <- revCount(grepVec_neg, CapstoneDF_neg$Reviews, CapstoneNeg_wA$wordFreq)
df_pos$reviewClass <- rep("Positive", dim(df_pos)[1])
df_neg$reviewClass <- rep("Negative", dim(df_neg)[1])
df1 <- df_pos[df_pos$word %in% df_neg$word,]
df2 <- df_neg[df_neg$word %in% df_pos$word,]
df_inBoth <- rbind(df1,df2)
#Other way to do this would be to just bind the original data frames.
#Group aesthetic is needed to ensure that labels are placed on correct bars
ggplot(df_inBoth, aes(x=word, y=reviewFraction, group=reviewClass)) +
geom_bar(aes(fill=reviewClass),stat="identity", position="dodge", col="navy", alpha=0.8, size=0.6) +
geom_text(aes(label=reviewFraction), position=position_dodge(0.9), angle=90,hjust=1.5, size=3, fontface="bold") +
theme(axis.text.x =element_text(angle=90)) + mytheme +
labs(x="Word", y="Review Fraction") + guides(fill=guide_legend(title="Review Class"))# +
#scale_fill_manual(values=c("darkorange1","dodgerblue"))
df1 <- df_pos[!(df_pos$word %in% df_neg$word),]
df2 <- df_neg[!(df_neg$word %in% df_pos$word),]
df_ninBoth <- rbind(df1,df2)
ggplot(df_ninBoth, aes(x=word, y=reviewFraction)) +
geom_bar(aes(fill=reviewClass),stat="identity", position="dodge", col="navy", alpha=0.8, size=0.6) +
geom_text(aes(label=reviewFraction), vjust=2, fontface="bold") +
theme(axis.text.x =element_text(angle=90)) + mytheme +
labs(x="Word", y="Review Fraction") + guides(fill=guide_legend(title="Review Class"))# +
# scale_fill_manual(values=c("darkorange1","dodgerblue"))
#Positive reviews: "food"
findAssocs(CapstonePos_wA$TDM, "food", 0.15)
#Negative reviews: "food"
findAssocs(CapstoneNeg_wA$TDM, "food", 0.16)
#Positive reviews: "menu"
findAssocs(CapstonePos_wA$TDM, "menu", 0.15)
#Negative reviews: "menu"
findAssocs(CapstoneNeg_wA$TDM, "menu", 0.15)
length(CapstoneDF_neg$Reviews[grepl("[Ss]ummerlicious", CapstoneDF_neg$Reviews)])
length(CapstoneDF_neg$Reviews[grepl("[Ww]interlicious", CapstoneDF_neg$Reviews)])
findAssocs(CapstonePos_wA$TDM, c("service", "staff", "server"), c(0.15,0.19,0.16))
mean(CapstoneDF$Ratings[CapstoneDF$Year=="2017"])
rm(list=ls())
TextAnalysis <- function(dataset, use.sentences=TRUE){
#Remove "The" or "the"  from reviews, since the tm_map() function below doesn't do it.
dataset$Reviews <- gsub("[Tt]he", "", dataset$Reviews)
#Options to split review text into individual sentences. This improves the use of the findAssocs() function later on.
if(use.sentences==TRUE){
dataCorpus <- get_sentences(dataset$Reviews) %>% VectorSource %>% Corpus()
}
else {
#Create corpus from the full text data
dataCorpus <- dataset$Reviews %>% VectorSource() %>% Corpus()
}
#Remove punctuation and english stopwords from text data
dataCorpus <- dataCorpus %>%
tm_map(removePunctuation) %>%
tm_map(removeWords, stopwords("english")) %>%
tm_map(content_transformer(tolower))
#Create term document matrix and convert to matrix class.
TDM <- TermDocumentMatrix(dataCorpus)
TDM_m <- TDM %>% as.matrix()
#Compute word frequencies from TDM.
wFreqs = sort(rowSums(TDM_m), decreasing=TRUE)
return(list("Corpus" = dataCorpus, "TDM"=TDM, "wordFreq"=wFreqs))
}
revCount <- function(grepVec, revVec,wordFreq){
percVec <- numeric(length(grepVec))
numVec <- numeric(length(grepVec))
for(i in 1:length(grepVec)){
numVec[i] <- length(revVec[grepl(grepVec[i],revVec)])
percVec[i] <- length(revVec[grepl(grepVec[i], revVec)])/length(revVec)
}
df <- data_frame("word"=names(wordFreq[1:length(grepVec)]),
"reviewCount"=round(numVec,2),
"reviewFraction"=round(percVec,2))
return(df)
}
revCount <- function(grepVec, revVec,wordFreq){
percVec <- numeric(length(grepVec))
numVec <- numeric(length(grepVec))
for(i in 1:length(grepVec)){
numVec[i] <- length(revVec[grepl(grepVec[i],revVec)])
percVec[i] <- length(revVec[grepl(grepVec[i], revVec)])/length(revVec)
}
df <- data_frame("word"=names(wordFreq[1:length(grepVec)]),
"reviewCount"=round(numVec,2),
"reviewFraction"=round(percVec,2))
return(df)
}
CapstoneDir = "/Users/Antoine/Documents/Work/DataScience/Springboard/FoundationsofDataScience/CapstoneProject/Deliverables"
setwd(CapstoneDir)
library(readr)
library(dplyr)
library(tidyr)
library(tm)
library(wordcloud)
library(ggplot2)
library(syuzhet)
CapstoneDF <- read_csv("./Data/CapstoneCleanData.csv")
str(CapstoneDF)
summary(CapstoneDF)
dim(CapstoneDF)
mytheme <-   theme(panel.grid.major = element_line(size=2),
panel.background = element_rect(fill="gray92", colour = "black", size = 2.0),
axis.line = element_line(colour = "black", size=1.0),
axis.text = element_text(face="bold", size=28),
axis.title = element_text(size=36),
axis.title.y = element_text(margin = margin(0,20,0,0)),
axis.title.x = element_text(margin=margin(20,0,0,0)),
plot.margin = margin(t=1, r=1, b=1, l=1),
plot.background = element_rect(fill="#F5F5F5"),
legend.background = element_rect(fill="#F5F5F5"),
legend.title = element_text(face="bold", size=28),
legend.text = element_text(size=24))
CapstoneDF <- CapstoneDF  %>% mutate(Quarters = quarters.Date(Dates))
CapstoneDF <- CapstoneDF %>% separate(Dates, c("Year","Month","Day"))
tempdf <- CapstoneDF %>% unite("YearMonth", Year, Month, sep="-")
CapstoneDF$YearMonth <- tempdf$YearMonth
tempdf <- CapstoneDF %>% unite("YearQuarters", Year, Quarters, sep="-")
CapstoneDF$YearQuarters <- tempdf$YearQuarters
CapstoneDF$Website <- factor(CapstoneDF$Website)
CapstoneDF$Quarters <- factor(CapstoneDF$Quarters)
t1 <- CapstoneDF %>% group_by(Year) %>% summarise(countYear=n())
CapstoneDF <- left_join(CapstoneDF,t1, by="Year")
t2 <- CapstoneDF %>% group_by(YearQuarters) %>% summarise(countQuarters=n())
CapstoneDF <- left_join(CapstoneDF,t2, by="YearQuarters")
t3 <- CapstoneDF %>% group_by(YearMonth) %>% summarise(countMonth=n())
CapstoneDF <- left_join(CapstoneDF,t3, by="YearMonth")
head(CapstoneDF[-1])
mean(CapstoneDF$Ratings)
CapstoneDF$RatingsAvg <- rep(mean(CapstoneDF$Ratings), length(CapstoneDF$Ratings))
ht=10
wd=10
t <- CapstoneDF %>% group_by(ceiling(Ratings)) %>% summarise(count = n())
t$count <- round(t$count/dim(CapstoneDF)[1],2)
names(t)[1] <- "Ratings"
revFractionHist <- ggplot(CapstoneDF, aes(x=ceiling(Ratings))) +
geom_bar(aes(y=..count../sum(..count..)), fill="firebrick", col="grey30", alpha=0.9, size=1.5) +
mytheme +
labs(x="Ratings", y="Review Fraction") +
geom_text(data=t, aes(label=count, y=count), vjust=2, fontface="bold", size=10) +
theme(panel.grid.minor=element_blank()) + theme(plot.margin = margin(10, 10, 10, 10))
revFractionHist
ht=10
wd=20
global_p7 <- ggplot(CapstoneDF, aes(ceiling(Ratings), y=..density.., col=Year)) +
geom_histogram(binwidth=1, alpha=1.0, fill="grey60", size=2.0) +
facet_grid(.~Year) + mytheme + labs(x="Ratings", y="Review Fraction") +
mytheme +
theme(strip.text = element_text(face = "bold", size=24),
strip.background = element_rect(colour = "black"),
legend.position = "none",
panel.grid.minor=element_blank(),
plot.margin = margin(10, 10, 10, 10))
global_p7
ht=10
wd=20
ratingYearHist <- ggplot(CapstoneDF, aes(ceiling(Ratings), y=..density.., col=Year)) +
geom_histogram(binwidth=1, alpha=1.0, fill="grey60", size=2.0) +
facet_grid(.~Year) + mytheme + labs(x="Ratings", y="Review Fraction") +
mytheme +
theme(strip.text = element_text(face = "bold", size=24),
strip.background = element_rect(colour = "black"),
legend.position = "none",
panel.grid.minor=element_blank(),
plot.margin = margin(10, 10, 10, 10))
ratingYearHist
ggsave(filename="./global_RatingsYearHist_dens.png", ratingYearHist, width=wd, height=ht)
temp <- CapstoneDF %>% group_by(Website) %>% summarise(average = mean(Ratings))
temp
temp <- CapstoneDF %>% group_by(Website) %>% summarise(average = mean(Ratings))
temp
wd=10.0
ht=10.0
ratingWebsiteHist <- ggplot(temp, aes(x=Website, y=average, fill=Website)) +
geom_bar(stat = "identity", col="grey30", size=1.5, alpha=0.9) +
coord_cartesian(ylim=c(0,6)) +
geom_text(aes(label=round(average,2)), vjust=2.5, fontface="bold", size=10) +
mytheme + theme(legend.position = "none", panel.grid.major.x=element_blank(), panel.grid.major.y=element_line(size = 2), panel.grid.minor.y=element_line(size = 2)) + labs(x="Websites", y="Ratings Average") +
scale_fill_manual(values = brewer.pal(9, "Reds")[4:9])
ratingWebsiteHist
yearVec <- sort(unique(as.numeric(CapstoneDF$Year)))
CapstoneDF_t <- CapstoneDF
CapstoneDF_t$Ratings <- ceiling(CapstoneDF_t$Ratings)
d1 <- CapstoneDF_t %>% group_by(Year,Ratings) %>% summarise(countRatings=n())
d2 <- CapstoneDF_t %>% group_by(Year) %>% summarise(countYear=n())
percentData <- left_join(d1,d2, by="Year")
percentData$Ratings <- ceiling(percentData$Ratings)
vec2 <- NULL
for(i in 1:length(yearVec)){
vec <- percentData$Ratings %>% subset(percentData$Year == yearVec[i])
if(!(1 %in% vec)){
yearCount <- subset(percentData$countYear, percentData$Year==yearVec[i])[1]
vec2 <- data.frame(Year=as.character(yearVec[i]), Ratings=as.numeric(1), countRatings=as.integer(0), countYear=as.integer(yearCount))
percentData <- (bind_rows(vec2, as.data.frame(percentData)))
}
}
percentData <- percentData %>% arrange(Ratings) %>%  mutate(percentRatings = countRatings/countYear)
percentData <- percentData %>% select(Year,Ratings,percentRatings, countYear) %>% arrange(Year,Ratings)
percentData$Ratings <- factor(percentData$Ratings)
ratingsFrac <- ggplot(percentData, aes(x=Year, y=percentRatings, group=Ratings, col=Ratings)) +
geom_smooth(data=subset(percentData, percentData$Ratings==1), method="lm", se=T, formula=y~poly(x,2, raw=TRUE), linetype="dashed", size=1.0, alpha=0.15, col="black") +
geom_smooth(data=subset(percentData, percentData$Ratings==2), method="lm", se=T, formula=y~poly(x,1, raw=TRUE), linetype="dashed", size=1.0, alpha=0.15, col="black") +
geom_smooth(data=subset(percentData, percentData$Ratings==3), method="lm", se=T, formula=y~poly(x,1, raw=TRUE), linetype="dashed", size=1.0, alpha=0.15, col="black") +
geom_smooth(data=subset(percentData, percentData$Ratings==4), method="lm", se=T, formula=y~poly(x,2, raw=TRUE), linetype="dashed", size=1.0, alpha=0.15, col="black") +
geom_smooth(data=subset(percentData, percentData$Ratings==5), method="lm", se=T, formula=y~poly(x,2, raw=TRUE), linetype="dashed", size=1.0, alpha=0.15, col="black") +
geom_point(aes(col=Ratings,  size=countYear), alpha=0.9) +
scale_size_continuous(range=c(10,25), guide = guide_legend(title = "Review Count")) +
mytheme + labs(y="Review Fraction") +
theme(panel.grid.minor=element_blank(),
plot.margin = margin(10, 10, 10, 10)) +
guides(col = guide_legend(override.aes = list(size=10))) +
scale_color_brewer(palette = "Dark2")
ratingsFrac
Capstone_wA <- TextAnalysis(CapstoneDF)
head(Capstone_wA$wordFreq, n=20)
png("globalwordcloud.png", width=4, height=4, units="in", res=300, bg="transparent")
wordcloud(Capstone_wA$Corpus, max.word=100, random.order=F, scale=c(2,0.5), colors=brewer.pal(9, "Blues")[5:9])
dev.off()
grepvec <- c("[Ff]ood", "[Gg]ood", "[Gg]reat", "[Ss]ervice",
"[Rr][Ee][Dd][Ss]", "[Pp]lace", "[Mm]enu",
"[Bb]ack", "[Nn]ice", "[Tt]ime")
ggplot(df_global, aes(x=word, y=reviewFraction)) +
geom_bar(fill="skyblue3", col="navy", stat="identity", alpha=0.9) +
geom_text(aes(label=reviewFraction), vjust=2, fontface="bold") +
theme(axis.text.x =element_text(angle=90)) +
mytheme +
labs(x="Word", y="Review Fraction")
df_global <- revCount(grepvec, CapstoneDF$Reviews, Capstone_wA$wordFreq)
ggplot(df_global, aes(x=word, y=reviewFraction)) +
geom_bar(fill="skyblue3", col="navy", stat="identity", alpha=0.9) +
geom_text(aes(label=reviewFraction), vjust=2, fontface="bold") +
theme(axis.text.x =element_text(angle=90)) +
mytheme +
labs(x="Word", y="Review Fraction")
CapstoneDF_pos <- CapstoneDF %>% subset(Ratings > 3)
CapstoneDF_neg <- CapstoneDF %>% subset(Ratings <= 3)
CapstonePos_wA <- TextAnalysis(CapstoneDF_pos)
CapstoneNeg_wA <- TextAnalysis(CapstoneDF_neg)
head(CapstonePos_wA$wordFreq, n=10)
head(CapstoneNeg_wA$wordFreq, n=10)
findAssocs(CapstoneNeg_wA$TDM, "time", 0.20)
